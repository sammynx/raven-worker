// Code generated by capnpc-go. DO NOT EDIT.

package workflow

import (
	context "golang.org/x/net/context"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
	server "zombiezen.com/go/capnproto2/server"
)

type Event struct{ capnp.Struct }

// Event_TypeID is the unique identifier for the type Event.
const Event_TypeID = 0xc994c5d41e2fd511

func NewEvent(s *capnp.Segment) (Event, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Event{st}, err
}

func NewRootEvent(s *capnp.Segment) (Event, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Event{st}, err
}

func ReadRootEvent(msg *capnp.Message) (Event, error) {
	root, err := msg.RootPtr()
	return Event{root.Struct()}, err
}

func (s Event) String() string {
	str, _ := text.Marshal(0xc994c5d41e2fd511, s.Struct)
	return str
}

func (s Event) Filter() bool {
	return s.Struct.Bit(0)
}

func (s Event) SetFilter(v bool) {
	s.Struct.SetBit(0, v)
}

func (s Event) Content() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Event) HasContent() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Event) SetContent(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s Event) Meta() (Event_Metadata_List, error) {
	p, err := s.Struct.Ptr(1)
	return Event_Metadata_List{List: p.List()}, err
}

func (s Event) HasMeta() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Event) SetMeta(v Event_Metadata_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewMeta sets the meta field to a newly
// allocated Event_Metadata_List, preferring placement in s's segment.
func (s Event) NewMeta(n int32) (Event_Metadata_List, error) {
	l, err := NewEvent_Metadata_List(s.Struct.Segment(), n)
	if err != nil {
		return Event_Metadata_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

// Event_List is a list of Event.
type Event_List struct{ capnp.List }

// NewEvent creates a new list of Event.
func NewEvent_List(s *capnp.Segment, sz int32) (Event_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return Event_List{l}, err
}

func (s Event_List) At(i int) Event { return Event{s.List.Struct(i)} }

func (s Event_List) Set(i int, v Event) error { return s.List.SetStruct(i, v.Struct) }

func (s Event_List) String() string {
	str, _ := text.MarshalList(0xc994c5d41e2fd511, s.List)
	return str
}

// Event_Promise is a wrapper for a Event promised by a client call.
type Event_Promise struct{ *capnp.Pipeline }

func (p Event_Promise) Struct() (Event, error) {
	s, err := p.Pipeline.Struct()
	return Event{s}, err
}

type Event_Metadata struct{ capnp.Struct }

// Event_Metadata_TypeID is the unique identifier for the type Event_Metadata.
const Event_Metadata_TypeID = 0xe7a29db357b0e94f

func NewEvent_Metadata(s *capnp.Segment) (Event_Metadata, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Event_Metadata{st}, err
}

func NewRootEvent_Metadata(s *capnp.Segment) (Event_Metadata, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Event_Metadata{st}, err
}

func ReadRootEvent_Metadata(msg *capnp.Message) (Event_Metadata, error) {
	root, err := msg.RootPtr()
	return Event_Metadata{root.Struct()}, err
}

func (s Event_Metadata) String() string {
	str, _ := text.Marshal(0xe7a29db357b0e94f, s.Struct)
	return str
}

func (s Event_Metadata) Key() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Event_Metadata) HasKey() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Event_Metadata) KeyBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Event_Metadata) SetKey(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Event_Metadata) Value() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s Event_Metadata) HasValue() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Event_Metadata) ValueBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s Event_Metadata) SetValue(v string) error {
	return s.Struct.SetText(1, v)
}

// Event_Metadata_List is a list of Event_Metadata.
type Event_Metadata_List struct{ capnp.List }

// NewEvent_Metadata creates a new list of Event_Metadata.
func NewEvent_Metadata_List(s *capnp.Segment, sz int32) (Event_Metadata_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Event_Metadata_List{l}, err
}

func (s Event_Metadata_List) At(i int) Event_Metadata { return Event_Metadata{s.List.Struct(i)} }

func (s Event_Metadata_List) Set(i int, v Event_Metadata) error { return s.List.SetStruct(i, v.Struct) }

func (s Event_Metadata_List) String() string {
	str, _ := text.MarshalList(0xe7a29db357b0e94f, s.List)
	return str
}

// Event_Metadata_Promise is a wrapper for a Event_Metadata promised by a client call.
type Event_Metadata_Promise struct{ *capnp.Pipeline }

func (p Event_Metadata_Promise) Struct() (Event_Metadata, error) {
	s, err := p.Pipeline.Struct()
	return Event_Metadata{s}, err
}

type Workflow struct{ Client capnp.Client }

// Workflow_TypeID is the unique identifier for the type Workflow.
const Workflow_TypeID = 0xf6c0150469fe7938

func (c Workflow) PutEvent(ctx context.Context, params func(Workflow_putEvent_Params) error, opts ...capnp.CallOption) Workflow_putEvent_Results_Promise {
	if c.Client == nil {
		return Workflow_putEvent_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xf6c0150469fe7938,
			MethodID:      0,
			InterfaceName: "job.capnp:Workflow",
			MethodName:    "putEvent",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Workflow_putEvent_Params{Struct: s}) }
	}
	return Workflow_putEvent_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Workflow) GetEvent(ctx context.Context, params func(Workflow_getEvent_Params) error, opts ...capnp.CallOption) Workflow_getEvent_Results_Promise {
	if c.Client == nil {
		return Workflow_getEvent_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xf6c0150469fe7938,
			MethodID:      1,
			InterfaceName: "job.capnp:Workflow",
			MethodName:    "getEvent",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Workflow_getEvent_Params{Struct: s}) }
	}
	return Workflow_getEvent_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Workflow) GetLatestEvent(ctx context.Context, params func(Workflow_getLatestEvent_Params) error, opts ...capnp.CallOption) Workflow_getLatestEvent_Results_Promise {
	if c.Client == nil {
		return Workflow_getLatestEvent_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xf6c0150469fe7938,
			MethodID:      2,
			InterfaceName: "job.capnp:Workflow",
			MethodName:    "getLatestEvent",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Workflow_getLatestEvent_Params{Struct: s}) }
	}
	return Workflow_getLatestEvent_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Workflow) GetJob(ctx context.Context, params func(Workflow_getJob_Params) error, opts ...capnp.CallOption) Workflow_getJob_Results_Promise {
	if c.Client == nil {
		return Workflow_getJob_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xf6c0150469fe7938,
			MethodID:      3,
			InterfaceName: "job.capnp:Workflow",
			MethodName:    "getJob",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Workflow_getJob_Params{Struct: s}) }
	}
	return Workflow_getJob_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Workflow) AckJob(ctx context.Context, params func(Workflow_ackJob_Params) error, opts ...capnp.CallOption) Workflow_ackJob_Results_Promise {
	if c.Client == nil {
		return Workflow_ackJob_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xf6c0150469fe7938,
			MethodID:      4,
			InterfaceName: "job.capnp:Workflow",
			MethodName:    "ackJob",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Workflow_ackJob_Params{Struct: s}) }
	}
	return Workflow_ackJob_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}

type Workflow_Server interface {
	PutEvent(Workflow_putEvent) error

	GetEvent(Workflow_getEvent) error

	GetLatestEvent(Workflow_getLatestEvent) error

	GetJob(Workflow_getJob) error

	AckJob(Workflow_ackJob) error
}

func Workflow_ServerToClient(s Workflow_Server) Workflow {
	c, _ := s.(server.Closer)
	return Workflow{Client: server.New(Workflow_Methods(nil, s), c)}
}

func Workflow_Methods(methods []server.Method, s Workflow_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 5)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf6c0150469fe7938,
			MethodID:      0,
			InterfaceName: "job.capnp:Workflow",
			MethodName:    "putEvent",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Workflow_putEvent{c, opts, Workflow_putEvent_Params{Struct: p}, Workflow_putEvent_Results{Struct: r}}
			return s.PutEvent(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf6c0150469fe7938,
			MethodID:      1,
			InterfaceName: "job.capnp:Workflow",
			MethodName:    "getEvent",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Workflow_getEvent{c, opts, Workflow_getEvent_Params{Struct: p}, Workflow_getEvent_Results{Struct: r}}
			return s.GetEvent(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf6c0150469fe7938,
			MethodID:      2,
			InterfaceName: "job.capnp:Workflow",
			MethodName:    "getLatestEvent",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Workflow_getLatestEvent{c, opts, Workflow_getLatestEvent_Params{Struct: p}, Workflow_getLatestEvent_Results{Struct: r}}
			return s.GetLatestEvent(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf6c0150469fe7938,
			MethodID:      3,
			InterfaceName: "job.capnp:Workflow",
			MethodName:    "getJob",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Workflow_getJob{c, opts, Workflow_getJob_Params{Struct: p}, Workflow_getJob_Results{Struct: r}}
			return s.GetJob(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 3},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf6c0150469fe7938,
			MethodID:      4,
			InterfaceName: "job.capnp:Workflow",
			MethodName:    "ackJob",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Workflow_ackJob{c, opts, Workflow_ackJob_Params{Struct: p}, Workflow_ackJob_Results{Struct: r}}
			return s.AckJob(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 8, PointerCount: 0},
	})

	return methods
}

// Workflow_putEvent holds the arguments for a server call to Workflow.putEvent.
type Workflow_putEvent struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Workflow_putEvent_Params
	Results Workflow_putEvent_Results
}

// Workflow_getEvent holds the arguments for a server call to Workflow.getEvent.
type Workflow_getEvent struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Workflow_getEvent_Params
	Results Workflow_getEvent_Results
}

// Workflow_getLatestEvent holds the arguments for a server call to Workflow.getLatestEvent.
type Workflow_getLatestEvent struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Workflow_getLatestEvent_Params
	Results Workflow_getLatestEvent_Results
}

// Workflow_getJob holds the arguments for a server call to Workflow.getJob.
type Workflow_getJob struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Workflow_getJob_Params
	Results Workflow_getJob_Results
}

// Workflow_ackJob holds the arguments for a server call to Workflow.ackJob.
type Workflow_ackJob struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Workflow_ackJob_Params
	Results Workflow_ackJob_Results
}

type Workflow_putEvent_Params struct{ capnp.Struct }

// Workflow_putEvent_Params_TypeID is the unique identifier for the type Workflow_putEvent_Params.
const Workflow_putEvent_Params_TypeID = 0x90df0352433557e1

func NewWorkflow_putEvent_Params(s *capnp.Segment) (Workflow_putEvent_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Workflow_putEvent_Params{st}, err
}

func NewRootWorkflow_putEvent_Params(s *capnp.Segment) (Workflow_putEvent_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Workflow_putEvent_Params{st}, err
}

func ReadRootWorkflow_putEvent_Params(msg *capnp.Message) (Workflow_putEvent_Params, error) {
	root, err := msg.RootPtr()
	return Workflow_putEvent_Params{root.Struct()}, err
}

func (s Workflow_putEvent_Params) String() string {
	str, _ := text.Marshal(0x90df0352433557e1, s.Struct)
	return str
}

func (s Workflow_putEvent_Params) FlowID() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Workflow_putEvent_Params) HasFlowID() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Workflow_putEvent_Params) SetFlowID(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s Workflow_putEvent_Params) Event() (Event, error) {
	p, err := s.Struct.Ptr(1)
	return Event{Struct: p.Struct()}, err
}

func (s Workflow_putEvent_Params) HasEvent() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Workflow_putEvent_Params) SetEvent(v Event) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewEvent sets the event field to a newly
// allocated Event struct, preferring placement in s's segment.
func (s Workflow_putEvent_Params) NewEvent() (Event, error) {
	ss, err := NewEvent(s.Struct.Segment())
	if err != nil {
		return Event{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// Workflow_putEvent_Params_List is a list of Workflow_putEvent_Params.
type Workflow_putEvent_Params_List struct{ capnp.List }

// NewWorkflow_putEvent_Params creates a new list of Workflow_putEvent_Params.
func NewWorkflow_putEvent_Params_List(s *capnp.Segment, sz int32) (Workflow_putEvent_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Workflow_putEvent_Params_List{l}, err
}

func (s Workflow_putEvent_Params_List) At(i int) Workflow_putEvent_Params {
	return Workflow_putEvent_Params{s.List.Struct(i)}
}

func (s Workflow_putEvent_Params_List) Set(i int, v Workflow_putEvent_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Workflow_putEvent_Params_List) String() string {
	str, _ := text.MarshalList(0x90df0352433557e1, s.List)
	return str
}

// Workflow_putEvent_Params_Promise is a wrapper for a Workflow_putEvent_Params promised by a client call.
type Workflow_putEvent_Params_Promise struct{ *capnp.Pipeline }

func (p Workflow_putEvent_Params_Promise) Struct() (Workflow_putEvent_Params, error) {
	s, err := p.Pipeline.Struct()
	return Workflow_putEvent_Params{s}, err
}

func (p Workflow_putEvent_Params_Promise) Event() Event_Promise {
	return Event_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

type Workflow_putEvent_Results struct{ capnp.Struct }

// Workflow_putEvent_Results_TypeID is the unique identifier for the type Workflow_putEvent_Results.
const Workflow_putEvent_Results_TypeID = 0xc1211c5b43eb5981

func NewWorkflow_putEvent_Results(s *capnp.Segment) (Workflow_putEvent_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Workflow_putEvent_Results{st}, err
}

func NewRootWorkflow_putEvent_Results(s *capnp.Segment) (Workflow_putEvent_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Workflow_putEvent_Results{st}, err
}

func ReadRootWorkflow_putEvent_Results(msg *capnp.Message) (Workflow_putEvent_Results, error) {
	root, err := msg.RootPtr()
	return Workflow_putEvent_Results{root.Struct()}, err
}

func (s Workflow_putEvent_Results) String() string {
	str, _ := text.Marshal(0xc1211c5b43eb5981, s.Struct)
	return str
}

func (s Workflow_putEvent_Results) EventID() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Workflow_putEvent_Results) HasEventID() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Workflow_putEvent_Results) SetEventID(v []byte) error {
	return s.Struct.SetData(0, v)
}

// Workflow_putEvent_Results_List is a list of Workflow_putEvent_Results.
type Workflow_putEvent_Results_List struct{ capnp.List }

// NewWorkflow_putEvent_Results creates a new list of Workflow_putEvent_Results.
func NewWorkflow_putEvent_Results_List(s *capnp.Segment, sz int32) (Workflow_putEvent_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Workflow_putEvent_Results_List{l}, err
}

func (s Workflow_putEvent_Results_List) At(i int) Workflow_putEvent_Results {
	return Workflow_putEvent_Results{s.List.Struct(i)}
}

func (s Workflow_putEvent_Results_List) Set(i int, v Workflow_putEvent_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Workflow_putEvent_Results_List) String() string {
	str, _ := text.MarshalList(0xc1211c5b43eb5981, s.List)
	return str
}

// Workflow_putEvent_Results_Promise is a wrapper for a Workflow_putEvent_Results promised by a client call.
type Workflow_putEvent_Results_Promise struct{ *capnp.Pipeline }

func (p Workflow_putEvent_Results_Promise) Struct() (Workflow_putEvent_Results, error) {
	s, err := p.Pipeline.Struct()
	return Workflow_putEvent_Results{s}, err
}

type Workflow_getEvent_Params struct{ capnp.Struct }

// Workflow_getEvent_Params_TypeID is the unique identifier for the type Workflow_getEvent_Params.
const Workflow_getEvent_Params_TypeID = 0xbf2d9c9f0bab4b71

func NewWorkflow_getEvent_Params(s *capnp.Segment) (Workflow_getEvent_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Workflow_getEvent_Params{st}, err
}

func NewRootWorkflow_getEvent_Params(s *capnp.Segment) (Workflow_getEvent_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Workflow_getEvent_Params{st}, err
}

func ReadRootWorkflow_getEvent_Params(msg *capnp.Message) (Workflow_getEvent_Params, error) {
	root, err := msg.RootPtr()
	return Workflow_getEvent_Params{root.Struct()}, err
}

func (s Workflow_getEvent_Params) String() string {
	str, _ := text.Marshal(0xbf2d9c9f0bab4b71, s.Struct)
	return str
}

func (s Workflow_getEvent_Params) EventID() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Workflow_getEvent_Params) HasEventID() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Workflow_getEvent_Params) SetEventID(v []byte) error {
	return s.Struct.SetData(0, v)
}

// Workflow_getEvent_Params_List is a list of Workflow_getEvent_Params.
type Workflow_getEvent_Params_List struct{ capnp.List }

// NewWorkflow_getEvent_Params creates a new list of Workflow_getEvent_Params.
func NewWorkflow_getEvent_Params_List(s *capnp.Segment, sz int32) (Workflow_getEvent_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Workflow_getEvent_Params_List{l}, err
}

func (s Workflow_getEvent_Params_List) At(i int) Workflow_getEvent_Params {
	return Workflow_getEvent_Params{s.List.Struct(i)}
}

func (s Workflow_getEvent_Params_List) Set(i int, v Workflow_getEvent_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Workflow_getEvent_Params_List) String() string {
	str, _ := text.MarshalList(0xbf2d9c9f0bab4b71, s.List)
	return str
}

// Workflow_getEvent_Params_Promise is a wrapper for a Workflow_getEvent_Params promised by a client call.
type Workflow_getEvent_Params_Promise struct{ *capnp.Pipeline }

func (p Workflow_getEvent_Params_Promise) Struct() (Workflow_getEvent_Params, error) {
	s, err := p.Pipeline.Struct()
	return Workflow_getEvent_Params{s}, err
}

type Workflow_getEvent_Results struct{ capnp.Struct }

// Workflow_getEvent_Results_TypeID is the unique identifier for the type Workflow_getEvent_Results.
const Workflow_getEvent_Results_TypeID = 0xd00cf1c4fa775caf

func NewWorkflow_getEvent_Results(s *capnp.Segment) (Workflow_getEvent_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Workflow_getEvent_Results{st}, err
}

func NewRootWorkflow_getEvent_Results(s *capnp.Segment) (Workflow_getEvent_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Workflow_getEvent_Results{st}, err
}

func ReadRootWorkflow_getEvent_Results(msg *capnp.Message) (Workflow_getEvent_Results, error) {
	root, err := msg.RootPtr()
	return Workflow_getEvent_Results{root.Struct()}, err
}

func (s Workflow_getEvent_Results) String() string {
	str, _ := text.Marshal(0xd00cf1c4fa775caf, s.Struct)
	return str
}

func (s Workflow_getEvent_Results) Event() (Event, error) {
	p, err := s.Struct.Ptr(0)
	return Event{Struct: p.Struct()}, err
}

func (s Workflow_getEvent_Results) HasEvent() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Workflow_getEvent_Results) SetEvent(v Event) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewEvent sets the event field to a newly
// allocated Event struct, preferring placement in s's segment.
func (s Workflow_getEvent_Results) NewEvent() (Event, error) {
	ss, err := NewEvent(s.Struct.Segment())
	if err != nil {
		return Event{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Workflow_getEvent_Results_List is a list of Workflow_getEvent_Results.
type Workflow_getEvent_Results_List struct{ capnp.List }

// NewWorkflow_getEvent_Results creates a new list of Workflow_getEvent_Results.
func NewWorkflow_getEvent_Results_List(s *capnp.Segment, sz int32) (Workflow_getEvent_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Workflow_getEvent_Results_List{l}, err
}

func (s Workflow_getEvent_Results_List) At(i int) Workflow_getEvent_Results {
	return Workflow_getEvent_Results{s.List.Struct(i)}
}

func (s Workflow_getEvent_Results_List) Set(i int, v Workflow_getEvent_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Workflow_getEvent_Results_List) String() string {
	str, _ := text.MarshalList(0xd00cf1c4fa775caf, s.List)
	return str
}

// Workflow_getEvent_Results_Promise is a wrapper for a Workflow_getEvent_Results promised by a client call.
type Workflow_getEvent_Results_Promise struct{ *capnp.Pipeline }

func (p Workflow_getEvent_Results_Promise) Struct() (Workflow_getEvent_Results, error) {
	s, err := p.Pipeline.Struct()
	return Workflow_getEvent_Results{s}, err
}

func (p Workflow_getEvent_Results_Promise) Event() Event_Promise {
	return Event_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type Workflow_getLatestEvent_Params struct{ capnp.Struct }

// Workflow_getLatestEvent_Params_TypeID is the unique identifier for the type Workflow_getLatestEvent_Params.
const Workflow_getLatestEvent_Params_TypeID = 0xd6d337f363ea4871

func NewWorkflow_getLatestEvent_Params(s *capnp.Segment) (Workflow_getLatestEvent_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Workflow_getLatestEvent_Params{st}, err
}

func NewRootWorkflow_getLatestEvent_Params(s *capnp.Segment) (Workflow_getLatestEvent_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Workflow_getLatestEvent_Params{st}, err
}

func ReadRootWorkflow_getLatestEvent_Params(msg *capnp.Message) (Workflow_getLatestEvent_Params, error) {
	root, err := msg.RootPtr()
	return Workflow_getLatestEvent_Params{root.Struct()}, err
}

func (s Workflow_getLatestEvent_Params) String() string {
	str, _ := text.Marshal(0xd6d337f363ea4871, s.Struct)
	return str
}

func (s Workflow_getLatestEvent_Params) FlowID() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Workflow_getLatestEvent_Params) HasFlowID() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Workflow_getLatestEvent_Params) SetFlowID(v []byte) error {
	return s.Struct.SetData(0, v)
}

// Workflow_getLatestEvent_Params_List is a list of Workflow_getLatestEvent_Params.
type Workflow_getLatestEvent_Params_List struct{ capnp.List }

// NewWorkflow_getLatestEvent_Params creates a new list of Workflow_getLatestEvent_Params.
func NewWorkflow_getLatestEvent_Params_List(s *capnp.Segment, sz int32) (Workflow_getLatestEvent_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Workflow_getLatestEvent_Params_List{l}, err
}

func (s Workflow_getLatestEvent_Params_List) At(i int) Workflow_getLatestEvent_Params {
	return Workflow_getLatestEvent_Params{s.List.Struct(i)}
}

func (s Workflow_getLatestEvent_Params_List) Set(i int, v Workflow_getLatestEvent_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Workflow_getLatestEvent_Params_List) String() string {
	str, _ := text.MarshalList(0xd6d337f363ea4871, s.List)
	return str
}

// Workflow_getLatestEvent_Params_Promise is a wrapper for a Workflow_getLatestEvent_Params promised by a client call.
type Workflow_getLatestEvent_Params_Promise struct{ *capnp.Pipeline }

func (p Workflow_getLatestEvent_Params_Promise) Struct() (Workflow_getLatestEvent_Params, error) {
	s, err := p.Pipeline.Struct()
	return Workflow_getLatestEvent_Params{s}, err
}

type Workflow_getLatestEvent_Results struct{ capnp.Struct }

// Workflow_getLatestEvent_Results_TypeID is the unique identifier for the type Workflow_getLatestEvent_Results.
const Workflow_getLatestEvent_Results_TypeID = 0xf6424f4c92cc064f

func NewWorkflow_getLatestEvent_Results(s *capnp.Segment) (Workflow_getLatestEvent_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Workflow_getLatestEvent_Results{st}, err
}

func NewRootWorkflow_getLatestEvent_Results(s *capnp.Segment) (Workflow_getLatestEvent_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Workflow_getLatestEvent_Results{st}, err
}

func ReadRootWorkflow_getLatestEvent_Results(msg *capnp.Message) (Workflow_getLatestEvent_Results, error) {
	root, err := msg.RootPtr()
	return Workflow_getLatestEvent_Results{root.Struct()}, err
}

func (s Workflow_getLatestEvent_Results) String() string {
	str, _ := text.Marshal(0xf6424f4c92cc064f, s.Struct)
	return str
}

func (s Workflow_getLatestEvent_Results) Event() (Event, error) {
	p, err := s.Struct.Ptr(0)
	return Event{Struct: p.Struct()}, err
}

func (s Workflow_getLatestEvent_Results) HasEvent() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Workflow_getLatestEvent_Results) SetEvent(v Event) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewEvent sets the event field to a newly
// allocated Event struct, preferring placement in s's segment.
func (s Workflow_getLatestEvent_Results) NewEvent() (Event, error) {
	ss, err := NewEvent(s.Struct.Segment())
	if err != nil {
		return Event{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Workflow_getLatestEvent_Results_List is a list of Workflow_getLatestEvent_Results.
type Workflow_getLatestEvent_Results_List struct{ capnp.List }

// NewWorkflow_getLatestEvent_Results creates a new list of Workflow_getLatestEvent_Results.
func NewWorkflow_getLatestEvent_Results_List(s *capnp.Segment, sz int32) (Workflow_getLatestEvent_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Workflow_getLatestEvent_Results_List{l}, err
}

func (s Workflow_getLatestEvent_Results_List) At(i int) Workflow_getLatestEvent_Results {
	return Workflow_getLatestEvent_Results{s.List.Struct(i)}
}

func (s Workflow_getLatestEvent_Results_List) Set(i int, v Workflow_getLatestEvent_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Workflow_getLatestEvent_Results_List) String() string {
	str, _ := text.MarshalList(0xf6424f4c92cc064f, s.List)
	return str
}

// Workflow_getLatestEvent_Results_Promise is a wrapper for a Workflow_getLatestEvent_Results promised by a client call.
type Workflow_getLatestEvent_Results_Promise struct{ *capnp.Pipeline }

func (p Workflow_getLatestEvent_Results_Promise) Struct() (Workflow_getLatestEvent_Results, error) {
	s, err := p.Pipeline.Struct()
	return Workflow_getLatestEvent_Results{s}, err
}

func (p Workflow_getLatestEvent_Results_Promise) Event() Event_Promise {
	return Event_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type Workflow_getJob_Params struct{ capnp.Struct }

// Workflow_getJob_Params_TypeID is the unique identifier for the type Workflow_getJob_Params.
const Workflow_getJob_Params_TypeID = 0xc8538212213bc1ef

func NewWorkflow_getJob_Params(s *capnp.Segment) (Workflow_getJob_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Workflow_getJob_Params{st}, err
}

func NewRootWorkflow_getJob_Params(s *capnp.Segment) (Workflow_getJob_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Workflow_getJob_Params{st}, err
}

func ReadRootWorkflow_getJob_Params(msg *capnp.Message) (Workflow_getJob_Params, error) {
	root, err := msg.RootPtr()
	return Workflow_getJob_Params{root.Struct()}, err
}

func (s Workflow_getJob_Params) String() string {
	str, _ := text.Marshal(0xc8538212213bc1ef, s.Struct)
	return str
}

func (s Workflow_getJob_Params) WorkerID() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Workflow_getJob_Params) HasWorkerID() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Workflow_getJob_Params) SetWorkerID(v []byte) error {
	return s.Struct.SetData(0, v)
}

// Workflow_getJob_Params_List is a list of Workflow_getJob_Params.
type Workflow_getJob_Params_List struct{ capnp.List }

// NewWorkflow_getJob_Params creates a new list of Workflow_getJob_Params.
func NewWorkflow_getJob_Params_List(s *capnp.Segment, sz int32) (Workflow_getJob_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Workflow_getJob_Params_List{l}, err
}

func (s Workflow_getJob_Params_List) At(i int) Workflow_getJob_Params {
	return Workflow_getJob_Params{s.List.Struct(i)}
}

func (s Workflow_getJob_Params_List) Set(i int, v Workflow_getJob_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Workflow_getJob_Params_List) String() string {
	str, _ := text.MarshalList(0xc8538212213bc1ef, s.List)
	return str
}

// Workflow_getJob_Params_Promise is a wrapper for a Workflow_getJob_Params promised by a client call.
type Workflow_getJob_Params_Promise struct{ *capnp.Pipeline }

func (p Workflow_getJob_Params_Promise) Struct() (Workflow_getJob_Params, error) {
	s, err := p.Pipeline.Struct()
	return Workflow_getJob_Params{s}, err
}

type Workflow_getJob_Results struct{ capnp.Struct }

// Workflow_getJob_Results_TypeID is the unique identifier for the type Workflow_getJob_Results.
const Workflow_getJob_Results_TypeID = 0xde7f463f079f6364

func NewWorkflow_getJob_Results(s *capnp.Segment) (Workflow_getJob_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Workflow_getJob_Results{st}, err
}

func NewRootWorkflow_getJob_Results(s *capnp.Segment) (Workflow_getJob_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Workflow_getJob_Results{st}, err
}

func ReadRootWorkflow_getJob_Results(msg *capnp.Message) (Workflow_getJob_Results, error) {
	root, err := msg.RootPtr()
	return Workflow_getJob_Results{root.Struct()}, err
}

func (s Workflow_getJob_Results) String() string {
	str, _ := text.Marshal(0xde7f463f079f6364, s.Struct)
	return str
}

func (s Workflow_getJob_Results) EventID() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Workflow_getJob_Results) HasEventID() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Workflow_getJob_Results) SetEventID(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s Workflow_getJob_Results) AckID() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s Workflow_getJob_Results) HasAckID() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Workflow_getJob_Results) SetAckID(v []byte) error {
	return s.Struct.SetData(1, v)
}

func (s Workflow_getJob_Results) FlowID() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return []byte(p.Data()), err
}

func (s Workflow_getJob_Results) HasFlowID() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Workflow_getJob_Results) SetFlowID(v []byte) error {
	return s.Struct.SetData(2, v)
}

// Workflow_getJob_Results_List is a list of Workflow_getJob_Results.
type Workflow_getJob_Results_List struct{ capnp.List }

// NewWorkflow_getJob_Results creates a new list of Workflow_getJob_Results.
func NewWorkflow_getJob_Results_List(s *capnp.Segment, sz int32) (Workflow_getJob_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return Workflow_getJob_Results_List{l}, err
}

func (s Workflow_getJob_Results_List) At(i int) Workflow_getJob_Results {
	return Workflow_getJob_Results{s.List.Struct(i)}
}

func (s Workflow_getJob_Results_List) Set(i int, v Workflow_getJob_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Workflow_getJob_Results_List) String() string {
	str, _ := text.MarshalList(0xde7f463f079f6364, s.List)
	return str
}

// Workflow_getJob_Results_Promise is a wrapper for a Workflow_getJob_Results promised by a client call.
type Workflow_getJob_Results_Promise struct{ *capnp.Pipeline }

func (p Workflow_getJob_Results_Promise) Struct() (Workflow_getJob_Results, error) {
	s, err := p.Pipeline.Struct()
	return Workflow_getJob_Results{s}, err
}

type Workflow_ackJob_Params struct{ capnp.Struct }

// Workflow_ackJob_Params_TypeID is the unique identifier for the type Workflow_ackJob_Params.
const Workflow_ackJob_Params_TypeID = 0xbb1e81ced54beb7d

func NewWorkflow_ackJob_Params(s *capnp.Segment) (Workflow_ackJob_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Workflow_ackJob_Params{st}, err
}

func NewRootWorkflow_ackJob_Params(s *capnp.Segment) (Workflow_ackJob_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Workflow_ackJob_Params{st}, err
}

func ReadRootWorkflow_ackJob_Params(msg *capnp.Message) (Workflow_ackJob_Params, error) {
	root, err := msg.RootPtr()
	return Workflow_ackJob_Params{root.Struct()}, err
}

func (s Workflow_ackJob_Params) String() string {
	str, _ := text.Marshal(0xbb1e81ced54beb7d, s.Struct)
	return str
}

func (s Workflow_ackJob_Params) Event() (Event, error) {
	p, err := s.Struct.Ptr(0)
	return Event{Struct: p.Struct()}, err
}

func (s Workflow_ackJob_Params) HasEvent() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Workflow_ackJob_Params) SetEvent(v Event) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewEvent sets the event field to a newly
// allocated Event struct, preferring placement in s's segment.
func (s Workflow_ackJob_Params) NewEvent() (Event, error) {
	ss, err := NewEvent(s.Struct.Segment())
	if err != nil {
		return Event{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Workflow_ackJob_Params) AckID() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s Workflow_ackJob_Params) HasAckID() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Workflow_ackJob_Params) SetAckID(v []byte) error {
	return s.Struct.SetData(1, v)
}

// Workflow_ackJob_Params_List is a list of Workflow_ackJob_Params.
type Workflow_ackJob_Params_List struct{ capnp.List }

// NewWorkflow_ackJob_Params creates a new list of Workflow_ackJob_Params.
func NewWorkflow_ackJob_Params_List(s *capnp.Segment, sz int32) (Workflow_ackJob_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Workflow_ackJob_Params_List{l}, err
}

func (s Workflow_ackJob_Params_List) At(i int) Workflow_ackJob_Params {
	return Workflow_ackJob_Params{s.List.Struct(i)}
}

func (s Workflow_ackJob_Params_List) Set(i int, v Workflow_ackJob_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Workflow_ackJob_Params_List) String() string {
	str, _ := text.MarshalList(0xbb1e81ced54beb7d, s.List)
	return str
}

// Workflow_ackJob_Params_Promise is a wrapper for a Workflow_ackJob_Params promised by a client call.
type Workflow_ackJob_Params_Promise struct{ *capnp.Pipeline }

func (p Workflow_ackJob_Params_Promise) Struct() (Workflow_ackJob_Params, error) {
	s, err := p.Pipeline.Struct()
	return Workflow_ackJob_Params{s}, err
}

func (p Workflow_ackJob_Params_Promise) Event() Event_Promise {
	return Event_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type Workflow_ackJob_Results struct{ capnp.Struct }

// Workflow_ackJob_Results_TypeID is the unique identifier for the type Workflow_ackJob_Results.
const Workflow_ackJob_Results_TypeID = 0x984386a9600175e5

func NewWorkflow_ackJob_Results(s *capnp.Segment) (Workflow_ackJob_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Workflow_ackJob_Results{st}, err
}

func NewRootWorkflow_ackJob_Results(s *capnp.Segment) (Workflow_ackJob_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Workflow_ackJob_Results{st}, err
}

func ReadRootWorkflow_ackJob_Results(msg *capnp.Message) (Workflow_ackJob_Results, error) {
	root, err := msg.RootPtr()
	return Workflow_ackJob_Results{root.Struct()}, err
}

func (s Workflow_ackJob_Results) String() string {
	str, _ := text.Marshal(0x984386a9600175e5, s.Struct)
	return str
}

func (s Workflow_ackJob_Results) Acked() bool {
	return s.Struct.Bit(0)
}

func (s Workflow_ackJob_Results) SetAcked(v bool) {
	s.Struct.SetBit(0, v)
}

// Workflow_ackJob_Results_List is a list of Workflow_ackJob_Results.
type Workflow_ackJob_Results_List struct{ capnp.List }

// NewWorkflow_ackJob_Results creates a new list of Workflow_ackJob_Results.
func NewWorkflow_ackJob_Results_List(s *capnp.Segment, sz int32) (Workflow_ackJob_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return Workflow_ackJob_Results_List{l}, err
}

func (s Workflow_ackJob_Results_List) At(i int) Workflow_ackJob_Results {
	return Workflow_ackJob_Results{s.List.Struct(i)}
}

func (s Workflow_ackJob_Results_List) Set(i int, v Workflow_ackJob_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Workflow_ackJob_Results_List) String() string {
	str, _ := text.MarshalList(0x984386a9600175e5, s.List)
	return str
}

// Workflow_ackJob_Results_Promise is a wrapper for a Workflow_ackJob_Results promised by a client call.
type Workflow_ackJob_Results_Promise struct{ *capnp.Pipeline }

func (p Workflow_ackJob_Results_Promise) Struct() (Workflow_ackJob_Results, error) {
	s, err := p.Pipeline.Struct()
	return Workflow_ackJob_Results{s}, err
}

const schema_f02bbc845ae92ee4 = "x\xda\xa4U]h#U\x18\xfd\xce\xbd3\x99\xa5\xa6" +
	"\x9a\xbb\x93E\x11\xdd\xd2\xa5\x0f\xfe5\xeeVE\x8dH" +
	"\xb2m\xaa\x9blKs\xab\xa5\xf8\x07\xce&\xe3\x1a\x93" +
	"6\xd9d\xb2a\x85R\xba\xa8\xe0\x9b\x8a\x0f\"\xca\x82" +
	"o\xe2\xc3\x0a>*\xe8\x82\x0b**\x82\xd67]\x04" +
	"E\xd6eQ\x91\x16\xea\x83#w\x92\xf9\xe9o\x04\xdf" +
	"23'\xe7\x9c{\xbes\xef=\xfc,\xcb\xb2#\xfa" +
	"%\x9dH\xe6\xf4\x98\xfb\xd3\xfc=\x13\xb3\xfc\xd2+$" +
	"L\x10\xe9\xcc \xbak\x95\xdd\x08\x82\xf9\x03\xeb\x10\xdc" +
	"_\xdax\xfa\xdd\x97&\xde i\x02D\x9a\x02\xdc\xcf" +
	"\xf7+\xc0Q\x9e!\xb8KW\x8e\xaf~\xbdr\xf0\xc3" +
	"(\x83\xc5\x07\x14\xa0\xc2\x15\xc3\xa9\xe3\xef]s\xee\xad" +
	"\xd1\x8f{\x00(\xc0E\xeeI|\xe51\xac<ve" +
	"\xe2\x89\x9b\x86/D\x01W\xf9!\x05X\xf3\x00\xbf_" +
	"x`x\xff\xd9G>\x8b\x02\x0eh\x9e\xc4\xcd\x9a\x02" +
	"\x88\xd5;\x0f~w\xf1\xf5\xcfI\x0e\x00\xee\xcf\xa9\xcb" +
	"\x8f\xbf\xf0\xd1\xed\x7ft\xcd\x98G\xb5\xb3\xe6\xa4v=" +
	"\x91)\xb5\xf3\x04\xf7\xfc\x93\x9d\xbf?\xfd3\xfeM\x94" +
	"mC\xf3\xe4\xa0+\xb6S\xc7~+\xfdu\xef\xb7\xdf" +
	"G\x01\xc3zA\x01F=@\xb9t\xce\xc8<\xb4\xfc" +
	"c\x0f\xc0\x15`Z\xf72\x99\xd3\x95\xc4\xcc\xe5\xf7\xe7" +
	"?x\xfb\x9d_I$\"\xe6\xbav\xae\xea_\x98\x1b" +
	"\xba\xfa\xb5\xa6\xabxfb_\xbe653\xbe\x1eU" +
	"\x93\xb1YE\xf6TL\xa9\xddw\xe6\x9f\x8av\xe0\x93" +
	"u\x12\x03<\\\x1b\xc1\\\x8a\xbdi\xbe\x18S\xf8\x95" +
	"\xd8\xc30\xe7\x0c\x83\xeep\x9f\xab\x9fH\x95\xac\xc6\"" +
	"o\xa4\xe7\xeb\xcd\xea3\xb5z'\xd5h;\x93\xa7\xed" +
	"Eg\xa4h5-\xbe\xd0\x92\xfb\xb8F\xa4\x81H\xdc" +
	"\x9a&\x92#\x1c\xf20\x83\x00\x92j\xc6bt\x8cH" +
	"\xde\xc2!\xeff\xc8(\x86|\x0e\x83\xc40H\x18\xb2" +
	"\x15\x11\x12\xe1\xaa\x08H\x10v\xd4\xb5J\xd5B\xfd\xc4" +
	"\xc8\xac\xddj\xd7\x1c\xb4\xa4\x16\xc8\x0e*\x85}\x1c2" +
	"\xc90d\x95\xaav\x19 \x06\xecM\xa4\xec/\xb4\xbc" +
	"\x7f\x06\xfe\xc7\xfa\xf8\xdf\xcd\xb0R\x0d\x97\xb5\xa3\xeaI" +
	"{Kl\x11\xff\xe3\xa1\xffeO\xa1\x0fW0\x02\x15" +
	"\x86Qs\xfe\x17\xd9I\xdb\xd9\x14G\x84\xaa@$\xe3" +
	"\x1c\xf2\x06\x06\xb7SoV\xedf>GD\xdb\xe8\xd0" +
	"H{~Hj\x88\xf6\x15\x05w\xdav\xac\xb2\xe5X" +
	"\xe4Q\xf9\xcc\x93\xaa(Y\x0e9\xc5\xe0\xe7\x9cW\xc6" +
	"s\x1c\xb2\xc8 \x18\x92`Db\xfa6\"y\x8cC" +
	"\x96Uy*5\xc7n\xfa\xb3].\xd5\x17\x1d5\x8d" +
	"\x9e\x9b\xeb\x16l\xc7\xc2\xb5\x84\"\x07\x12\xa1\x0b\x82z" +
	"\xb9\xf7Lv\xca1Z\xaa~=\xd56\x93NY\x8e" +
	"\xdd\x8a\x8c{k\xae\xe9\x90z\xcb\x8e\xd8kBA\xf3" +
	"#9\x8e\x879\x06\x85\xcd\x8fE\x83d\xbd \xd3\xbd" +
	" \x1f\xdd^\x8b\xcd\xed\xdd\xcd\x11\xeb\x0d9\x15\x8e\xb4" +
	"\x08Dw\xcf\xa1>\xbb\xc7\xa8\xdag\x10'\x868a" +
	"\xe8\xb4Uk\xdb\xfe\xd3\x7f\x09\xb2\xdf\xc6\xef7#\xf8" +
	"\xd4\xbc\xdeQ\xc6\x93\\'\x0a\xae,\xf8\xf7\x86x\xb5" +
	"@L\xbcl \xbck\xe0\x1f\xf2bI}k\x1b`" +
	"\xc1\xb1\x0e\xff\xc4\x15\x95\xe7\x89\x09\xcb\x00\x0fn\x18\xf8" +
	"G\xbb\x98K\x13\x13y\x03Zp\xc1\xc1\xbf\x0a\xc5\x83" +
	"\xea\xdb\x11\xc3\xf575\x11e\xe1\xfa\xd5\x0c\x9e\xbc(" +
	"(\xd3}\x9bE\xa6[\x8a,2\xdd\xe3,\x8b\"\xf0" +
	"o\x00\x00\x00\xff\xff\xa8\xfa\xdf\x08"

func init() {
	schemas.Register(schema_f02bbc845ae92ee4,
		0x90df0352433557e1,
		0x984386a9600175e5,
		0xbb1e81ced54beb7d,
		0xbf2d9c9f0bab4b71,
		0xc1211c5b43eb5981,
		0xc8538212213bc1ef,
		0xc994c5d41e2fd511,
		0xd00cf1c4fa775caf,
		0xd6d337f363ea4871,
		0xde7f463f079f6364,
		0xe7a29db357b0e94f,
		0xf6424f4c92cc064f,
		0xf6c0150469fe7938)
}
