// Code generated by capnpc-go. DO NOT EDIT.

package workflow

import (
	context "golang.org/x/net/context"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
	server "zombiezen.com/go/capnproto2/server"
)

type Event struct{ capnp.Struct }

// Event_TypeID is the unique identifier for the type Event.
const Event_TypeID = 0xf57a5642b033d8c1

func NewEvent(s *capnp.Segment) (Event, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return Event{st}, err
}

func NewRootEvent(s *capnp.Segment) (Event, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return Event{st}, err
}

func ReadRootEvent(msg *capnp.Message) (Event, error) {
	root, err := msg.RootPtr()
	return Event{root.Struct()}, err
}

func (s Event) String() string {
	str, _ := text.Marshal(0xf57a5642b033d8c1, s.Struct)
	return str
}

func (s Event) Filter() bool {
	return s.Struct.Bit(0)
}

func (s Event) SetFilter(v bool) {
	s.Struct.SetBit(0, v)
}

func (s Event) Content() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Event) HasContent() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Event) SetContent(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s Event) Meta() (Event_Metadata_List, error) {
	p, err := s.Struct.Ptr(1)
	return Event_Metadata_List{List: p.List()}, err
}

func (s Event) HasMeta() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Event) SetMeta(v Event_Metadata_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewMeta sets the meta field to a newly
// allocated Event_Metadata_List, preferring placement in s's segment.
func (s Event) NewMeta(n int32) (Event_Metadata_List, error) {
	l, err := NewEvent_Metadata_List(s.Struct.Segment(), n)
	if err != nil {
		return Event_Metadata_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s Event) Worker() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return []byte(p.Data()), err
}

func (s Event) HasWorker() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Event) SetWorker(v []byte) error {
	return s.Struct.SetData(2, v)
}

// Event_List is a list of Event.
type Event_List struct{ capnp.List }

// NewEvent creates a new list of Event.
func NewEvent_List(s *capnp.Segment, sz int32) (Event_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return Event_List{l}, err
}

func (s Event_List) At(i int) Event { return Event{s.List.Struct(i)} }

func (s Event_List) Set(i int, v Event) error { return s.List.SetStruct(i, v.Struct) }

func (s Event_List) String() string {
	str, _ := text.MarshalList(0xf57a5642b033d8c1, s.List)
	return str
}

// Event_Promise is a wrapper for a Event promised by a client call.
type Event_Promise struct{ *capnp.Pipeline }

func (p Event_Promise) Struct() (Event, error) {
	s, err := p.Pipeline.Struct()
	return Event{s}, err
}

type Event_Metadata struct{ capnp.Struct }

// Event_Metadata_TypeID is the unique identifier for the type Event_Metadata.
const Event_Metadata_TypeID = 0xe9a0380ad629b742

func NewEvent_Metadata(s *capnp.Segment) (Event_Metadata, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Event_Metadata{st}, err
}

func NewRootEvent_Metadata(s *capnp.Segment) (Event_Metadata, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Event_Metadata{st}, err
}

func ReadRootEvent_Metadata(msg *capnp.Message) (Event_Metadata, error) {
	root, err := msg.RootPtr()
	return Event_Metadata{root.Struct()}, err
}

func (s Event_Metadata) String() string {
	str, _ := text.Marshal(0xe9a0380ad629b742, s.Struct)
	return str
}

func (s Event_Metadata) Key() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Event_Metadata) HasKey() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Event_Metadata) KeyBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Event_Metadata) SetKey(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Event_Metadata) Value() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s Event_Metadata) HasValue() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Event_Metadata) ValueBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s Event_Metadata) SetValue(v string) error {
	return s.Struct.SetText(1, v)
}

// Event_Metadata_List is a list of Event_Metadata.
type Event_Metadata_List struct{ capnp.List }

// NewEvent_Metadata creates a new list of Event_Metadata.
func NewEvent_Metadata_List(s *capnp.Segment, sz int32) (Event_Metadata_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Event_Metadata_List{l}, err
}

func (s Event_Metadata_List) At(i int) Event_Metadata { return Event_Metadata{s.List.Struct(i)} }

func (s Event_Metadata_List) Set(i int, v Event_Metadata) error { return s.List.SetStruct(i, v.Struct) }

func (s Event_Metadata_List) String() string {
	str, _ := text.MarshalList(0xe9a0380ad629b742, s.List)
	return str
}

// Event_Metadata_Promise is a wrapper for a Event_Metadata promised by a client call.
type Event_Metadata_Promise struct{ *capnp.Pipeline }

func (p Event_Metadata_Promise) Struct() (Event_Metadata, error) {
	s, err := p.Pipeline.Struct()
	return Event_Metadata{s}, err
}

type Queue struct{ capnp.Struct }

// Queue_TypeID is the unique identifier for the type Queue.
const Queue_TypeID = 0x8be40c5e90cff4cf

func NewQueue(s *capnp.Segment) (Queue, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Queue{st}, err
}

func NewRootQueue(s *capnp.Segment) (Queue, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Queue{st}, err
}

func ReadRootQueue(msg *capnp.Message) (Queue, error) {
	root, err := msg.RootPtr()
	return Queue{root.Struct()}, err
}

func (s Queue) String() string {
	str, _ := text.Marshal(0x8be40c5e90cff4cf, s.Struct)
	return str
}

func (s Queue) WorkerId() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Queue) HasWorkerId() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Queue) SetWorkerId(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s Queue) QueueSize() uint64 {
	return s.Struct.Uint64(0)
}

func (s Queue) SetQueueSize(v uint64) {
	s.Struct.SetUint64(0, v)
}

// Queue_List is a list of Queue.
type Queue_List struct{ capnp.List }

// NewQueue creates a new list of Queue.
func NewQueue_List(s *capnp.Segment, sz int32) (Queue_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Queue_List{l}, err
}

func (s Queue_List) At(i int) Queue { return Queue{s.List.Struct(i)} }

func (s Queue_List) Set(i int, v Queue) error { return s.List.SetStruct(i, v.Struct) }

func (s Queue_List) String() string {
	str, _ := text.MarshalList(0x8be40c5e90cff4cf, s.List)
	return str
}

// Queue_Promise is a wrapper for a Queue promised by a client call.
type Queue_Promise struct{ *capnp.Pipeline }

func (p Queue_Promise) Struct() (Queue, error) {
	s, err := p.Pipeline.Struct()
	return Queue{s}, err
}

type Connection struct{ Client capnp.Client }

// Connection_TypeID is the unique identifier for the type Connection.
const Connection_TypeID = 0xfdce09f9d8aeb8ae

func (c Connection) PutEvent(ctx context.Context, params func(Connection_putEvent_Params) error, opts ...capnp.CallOption) Connection_putEvent_Results_Promise {
	if c.Client == nil {
		return Connection_putEvent_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xfdce09f9d8aeb8ae,
			MethodID:      0,
			InterfaceName: "job.capnp:Connection",
			MethodName:    "putEvent",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Connection_putEvent_Params{Struct: s}) }
	}
	return Connection_putEvent_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Connection) PutNewEvent(ctx context.Context, params func(Connection_putNewEvent_Params) error, opts ...capnp.CallOption) Connection_putNewEvent_Results_Promise {
	if c.Client == nil {
		return Connection_putNewEvent_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xfdce09f9d8aeb8ae,
			MethodID:      1,
			InterfaceName: "job.capnp:Connection",
			MethodName:    "putNewEvent",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Connection_putNewEvent_Params{Struct: s}) }
	}
	return Connection_putNewEvent_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Connection) GetEvent(ctx context.Context, params func(Connection_getEvent_Params) error, opts ...capnp.CallOption) Connection_getEvent_Results_Promise {
	if c.Client == nil {
		return Connection_getEvent_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xfdce09f9d8aeb8ae,
			MethodID:      2,
			InterfaceName: "job.capnp:Connection",
			MethodName:    "getEvent",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Connection_getEvent_Params{Struct: s}) }
	}
	return Connection_getEvent_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Connection) GetJob(ctx context.Context, params func(Connection_getJob_Params) error, opts ...capnp.CallOption) Connection_getJob_Results_Promise {
	if c.Client == nil {
		return Connection_getJob_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xfdce09f9d8aeb8ae,
			MethodID:      3,
			InterfaceName: "job.capnp:Connection",
			MethodName:    "getJob",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Connection_getJob_Params{Struct: s}) }
	}
	return Connection_getJob_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Connection) AckJob(ctx context.Context, params func(Connection_ackJob_Params) error, opts ...capnp.CallOption) Connection_ackJob_Results_Promise {
	if c.Client == nil {
		return Connection_ackJob_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xfdce09f9d8aeb8ae,
			MethodID:      4,
			InterfaceName: "job.capnp:Connection",
			MethodName:    "ackJob",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Connection_ackJob_Params{Struct: s}) }
	}
	return Connection_ackJob_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}

type Connection_Server interface {
	PutEvent(Connection_putEvent) error

	PutNewEvent(Connection_putNewEvent) error

	GetEvent(Connection_getEvent) error

	GetJob(Connection_getJob) error

	AckJob(Connection_ackJob) error
}

func Connection_ServerToClient(s Connection_Server) Connection {
	c, _ := s.(server.Closer)
	return Connection{Client: server.New(Connection_Methods(nil, s), c)}
}

func Connection_Methods(methods []server.Method, s Connection_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 5)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfdce09f9d8aeb8ae,
			MethodID:      0,
			InterfaceName: "job.capnp:Connection",
			MethodName:    "putEvent",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Connection_putEvent{c, opts, Connection_putEvent_Params{Struct: p}, Connection_putEvent_Results{Struct: r}}
			return s.PutEvent(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfdce09f9d8aeb8ae,
			MethodID:      1,
			InterfaceName: "job.capnp:Connection",
			MethodName:    "putNewEvent",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Connection_putNewEvent{c, opts, Connection_putNewEvent_Params{Struct: p}, Connection_putNewEvent_Results{Struct: r}}
			return s.PutNewEvent(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfdce09f9d8aeb8ae,
			MethodID:      2,
			InterfaceName: "job.capnp:Connection",
			MethodName:    "getEvent",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Connection_getEvent{c, opts, Connection_getEvent_Params{Struct: p}, Connection_getEvent_Results{Struct: r}}
			return s.GetEvent(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfdce09f9d8aeb8ae,
			MethodID:      3,
			InterfaceName: "job.capnp:Connection",
			MethodName:    "getJob",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Connection_getJob{c, opts, Connection_getJob_Params{Struct: p}, Connection_getJob_Results{Struct: r}}
			return s.GetJob(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 2},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfdce09f9d8aeb8ae,
			MethodID:      4,
			InterfaceName: "job.capnp:Connection",
			MethodName:    "ackJob",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Connection_ackJob{c, opts, Connection_ackJob_Params{Struct: p}, Connection_ackJob_Results{Struct: r}}
			return s.AckJob(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 8, PointerCount: 0},
	})

	return methods
}

// Connection_putEvent holds the arguments for a server call to Connection.putEvent.
type Connection_putEvent struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Connection_putEvent_Params
	Results Connection_putEvent_Results
}

// Connection_putNewEvent holds the arguments for a server call to Connection.putNewEvent.
type Connection_putNewEvent struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Connection_putNewEvent_Params
	Results Connection_putNewEvent_Results
}

// Connection_getEvent holds the arguments for a server call to Connection.getEvent.
type Connection_getEvent struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Connection_getEvent_Params
	Results Connection_getEvent_Results
}

// Connection_getJob holds the arguments for a server call to Connection.getJob.
type Connection_getJob struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Connection_getJob_Params
	Results Connection_getJob_Results
}

// Connection_ackJob holds the arguments for a server call to Connection.ackJob.
type Connection_ackJob struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Connection_ackJob_Params
	Results Connection_ackJob_Results
}

type Connection_putEvent_Params struct{ capnp.Struct }

// Connection_putEvent_Params_TypeID is the unique identifier for the type Connection_putEvent_Params.
const Connection_putEvent_Params_TypeID = 0xde10a9cc0d72b72e

func NewConnection_putEvent_Params(s *capnp.Segment) (Connection_putEvent_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Connection_putEvent_Params{st}, err
}

func NewRootConnection_putEvent_Params(s *capnp.Segment) (Connection_putEvent_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Connection_putEvent_Params{st}, err
}

func ReadRootConnection_putEvent_Params(msg *capnp.Message) (Connection_putEvent_Params, error) {
	root, err := msg.RootPtr()
	return Connection_putEvent_Params{root.Struct()}, err
}

func (s Connection_putEvent_Params) String() string {
	str, _ := text.Marshal(0xde10a9cc0d72b72e, s.Struct)
	return str
}

func (s Connection_putEvent_Params) EventID() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Connection_putEvent_Params) HasEventID() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Connection_putEvent_Params) SetEventID(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s Connection_putEvent_Params) Event() (Event, error) {
	p, err := s.Struct.Ptr(1)
	return Event{Struct: p.Struct()}, err
}

func (s Connection_putEvent_Params) HasEvent() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Connection_putEvent_Params) SetEvent(v Event) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewEvent sets the event field to a newly
// allocated Event struct, preferring placement in s's segment.
func (s Connection_putEvent_Params) NewEvent() (Event, error) {
	ss, err := NewEvent(s.Struct.Segment())
	if err != nil {
		return Event{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// Connection_putEvent_Params_List is a list of Connection_putEvent_Params.
type Connection_putEvent_Params_List struct{ capnp.List }

// NewConnection_putEvent_Params creates a new list of Connection_putEvent_Params.
func NewConnection_putEvent_Params_List(s *capnp.Segment, sz int32) (Connection_putEvent_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Connection_putEvent_Params_List{l}, err
}

func (s Connection_putEvent_Params_List) At(i int) Connection_putEvent_Params {
	return Connection_putEvent_Params{s.List.Struct(i)}
}

func (s Connection_putEvent_Params_List) Set(i int, v Connection_putEvent_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Connection_putEvent_Params_List) String() string {
	str, _ := text.MarshalList(0xde10a9cc0d72b72e, s.List)
	return str
}

// Connection_putEvent_Params_Promise is a wrapper for a Connection_putEvent_Params promised by a client call.
type Connection_putEvent_Params_Promise struct{ *capnp.Pipeline }

func (p Connection_putEvent_Params_Promise) Struct() (Connection_putEvent_Params, error) {
	s, err := p.Pipeline.Struct()
	return Connection_putEvent_Params{s}, err
}

func (p Connection_putEvent_Params_Promise) Event() Event_Promise {
	return Event_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

type Connection_putEvent_Results struct{ capnp.Struct }

// Connection_putEvent_Results_TypeID is the unique identifier for the type Connection_putEvent_Results.
const Connection_putEvent_Results_TypeID = 0x88498a4904c5c24b

func NewConnection_putEvent_Results(s *capnp.Segment) (Connection_putEvent_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Connection_putEvent_Results{st}, err
}

func NewRootConnection_putEvent_Results(s *capnp.Segment) (Connection_putEvent_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Connection_putEvent_Results{st}, err
}

func ReadRootConnection_putEvent_Results(msg *capnp.Message) (Connection_putEvent_Results, error) {
	root, err := msg.RootPtr()
	return Connection_putEvent_Results{root.Struct()}, err
}

func (s Connection_putEvent_Results) String() string {
	str, _ := text.Marshal(0x88498a4904c5c24b, s.Struct)
	return str
}

// Connection_putEvent_Results_List is a list of Connection_putEvent_Results.
type Connection_putEvent_Results_List struct{ capnp.List }

// NewConnection_putEvent_Results creates a new list of Connection_putEvent_Results.
func NewConnection_putEvent_Results_List(s *capnp.Segment, sz int32) (Connection_putEvent_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Connection_putEvent_Results_List{l}, err
}

func (s Connection_putEvent_Results_List) At(i int) Connection_putEvent_Results {
	return Connection_putEvent_Results{s.List.Struct(i)}
}

func (s Connection_putEvent_Results_List) Set(i int, v Connection_putEvent_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Connection_putEvent_Results_List) String() string {
	str, _ := text.MarshalList(0x88498a4904c5c24b, s.List)
	return str
}

// Connection_putEvent_Results_Promise is a wrapper for a Connection_putEvent_Results promised by a client call.
type Connection_putEvent_Results_Promise struct{ *capnp.Pipeline }

func (p Connection_putEvent_Results_Promise) Struct() (Connection_putEvent_Results, error) {
	s, err := p.Pipeline.Struct()
	return Connection_putEvent_Results{s}, err
}

type Connection_putNewEvent_Params struct{ capnp.Struct }

// Connection_putNewEvent_Params_TypeID is the unique identifier for the type Connection_putNewEvent_Params.
const Connection_putNewEvent_Params_TypeID = 0xf6ca343646120f95

func NewConnection_putNewEvent_Params(s *capnp.Segment) (Connection_putNewEvent_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Connection_putNewEvent_Params{st}, err
}

func NewRootConnection_putNewEvent_Params(s *capnp.Segment) (Connection_putNewEvent_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Connection_putNewEvent_Params{st}, err
}

func ReadRootConnection_putNewEvent_Params(msg *capnp.Message) (Connection_putNewEvent_Params, error) {
	root, err := msg.RootPtr()
	return Connection_putNewEvent_Params{root.Struct()}, err
}

func (s Connection_putNewEvent_Params) String() string {
	str, _ := text.Marshal(0xf6ca343646120f95, s.Struct)
	return str
}

func (s Connection_putNewEvent_Params) Event() (Event, error) {
	p, err := s.Struct.Ptr(0)
	return Event{Struct: p.Struct()}, err
}

func (s Connection_putNewEvent_Params) HasEvent() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Connection_putNewEvent_Params) SetEvent(v Event) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewEvent sets the event field to a newly
// allocated Event struct, preferring placement in s's segment.
func (s Connection_putNewEvent_Params) NewEvent() (Event, error) {
	ss, err := NewEvent(s.Struct.Segment())
	if err != nil {
		return Event{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Connection_putNewEvent_Params_List is a list of Connection_putNewEvent_Params.
type Connection_putNewEvent_Params_List struct{ capnp.List }

// NewConnection_putNewEvent_Params creates a new list of Connection_putNewEvent_Params.
func NewConnection_putNewEvent_Params_List(s *capnp.Segment, sz int32) (Connection_putNewEvent_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Connection_putNewEvent_Params_List{l}, err
}

func (s Connection_putNewEvent_Params_List) At(i int) Connection_putNewEvent_Params {
	return Connection_putNewEvent_Params{s.List.Struct(i)}
}

func (s Connection_putNewEvent_Params_List) Set(i int, v Connection_putNewEvent_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Connection_putNewEvent_Params_List) String() string {
	str, _ := text.MarshalList(0xf6ca343646120f95, s.List)
	return str
}

// Connection_putNewEvent_Params_Promise is a wrapper for a Connection_putNewEvent_Params promised by a client call.
type Connection_putNewEvent_Params_Promise struct{ *capnp.Pipeline }

func (p Connection_putNewEvent_Params_Promise) Struct() (Connection_putNewEvent_Params, error) {
	s, err := p.Pipeline.Struct()
	return Connection_putNewEvent_Params{s}, err
}

func (p Connection_putNewEvent_Params_Promise) Event() Event_Promise {
	return Event_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type Connection_putNewEvent_Results struct{ capnp.Struct }

// Connection_putNewEvent_Results_TypeID is the unique identifier for the type Connection_putNewEvent_Results.
const Connection_putNewEvent_Results_TypeID = 0xc9cfdb3e090d737d

func NewConnection_putNewEvent_Results(s *capnp.Segment) (Connection_putNewEvent_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Connection_putNewEvent_Results{st}, err
}

func NewRootConnection_putNewEvent_Results(s *capnp.Segment) (Connection_putNewEvent_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Connection_putNewEvent_Results{st}, err
}

func ReadRootConnection_putNewEvent_Results(msg *capnp.Message) (Connection_putNewEvent_Results, error) {
	root, err := msg.RootPtr()
	return Connection_putNewEvent_Results{root.Struct()}, err
}

func (s Connection_putNewEvent_Results) String() string {
	str, _ := text.Marshal(0xc9cfdb3e090d737d, s.Struct)
	return str
}

func (s Connection_putNewEvent_Results) EventID() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Connection_putNewEvent_Results) HasEventID() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Connection_putNewEvent_Results) SetEventID(v []byte) error {
	return s.Struct.SetData(0, v)
}

// Connection_putNewEvent_Results_List is a list of Connection_putNewEvent_Results.
type Connection_putNewEvent_Results_List struct{ capnp.List }

// NewConnection_putNewEvent_Results creates a new list of Connection_putNewEvent_Results.
func NewConnection_putNewEvent_Results_List(s *capnp.Segment, sz int32) (Connection_putNewEvent_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Connection_putNewEvent_Results_List{l}, err
}

func (s Connection_putNewEvent_Results_List) At(i int) Connection_putNewEvent_Results {
	return Connection_putNewEvent_Results{s.List.Struct(i)}
}

func (s Connection_putNewEvent_Results_List) Set(i int, v Connection_putNewEvent_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Connection_putNewEvent_Results_List) String() string {
	str, _ := text.MarshalList(0xc9cfdb3e090d737d, s.List)
	return str
}

// Connection_putNewEvent_Results_Promise is a wrapper for a Connection_putNewEvent_Results promised by a client call.
type Connection_putNewEvent_Results_Promise struct{ *capnp.Pipeline }

func (p Connection_putNewEvent_Results_Promise) Struct() (Connection_putNewEvent_Results, error) {
	s, err := p.Pipeline.Struct()
	return Connection_putNewEvent_Results{s}, err
}

type Connection_getEvent_Params struct{ capnp.Struct }

// Connection_getEvent_Params_TypeID is the unique identifier for the type Connection_getEvent_Params.
const Connection_getEvent_Params_TypeID = 0x858fba217e5b6d0a

func NewConnection_getEvent_Params(s *capnp.Segment) (Connection_getEvent_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Connection_getEvent_Params{st}, err
}

func NewRootConnection_getEvent_Params(s *capnp.Segment) (Connection_getEvent_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Connection_getEvent_Params{st}, err
}

func ReadRootConnection_getEvent_Params(msg *capnp.Message) (Connection_getEvent_Params, error) {
	root, err := msg.RootPtr()
	return Connection_getEvent_Params{root.Struct()}, err
}

func (s Connection_getEvent_Params) String() string {
	str, _ := text.Marshal(0x858fba217e5b6d0a, s.Struct)
	return str
}

func (s Connection_getEvent_Params) EventID() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Connection_getEvent_Params) HasEventID() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Connection_getEvent_Params) SetEventID(v []byte) error {
	return s.Struct.SetData(0, v)
}

// Connection_getEvent_Params_List is a list of Connection_getEvent_Params.
type Connection_getEvent_Params_List struct{ capnp.List }

// NewConnection_getEvent_Params creates a new list of Connection_getEvent_Params.
func NewConnection_getEvent_Params_List(s *capnp.Segment, sz int32) (Connection_getEvent_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Connection_getEvent_Params_List{l}, err
}

func (s Connection_getEvent_Params_List) At(i int) Connection_getEvent_Params {
	return Connection_getEvent_Params{s.List.Struct(i)}
}

func (s Connection_getEvent_Params_List) Set(i int, v Connection_getEvent_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Connection_getEvent_Params_List) String() string {
	str, _ := text.MarshalList(0x858fba217e5b6d0a, s.List)
	return str
}

// Connection_getEvent_Params_Promise is a wrapper for a Connection_getEvent_Params promised by a client call.
type Connection_getEvent_Params_Promise struct{ *capnp.Pipeline }

func (p Connection_getEvent_Params_Promise) Struct() (Connection_getEvent_Params, error) {
	s, err := p.Pipeline.Struct()
	return Connection_getEvent_Params{s}, err
}

type Connection_getEvent_Results struct{ capnp.Struct }

// Connection_getEvent_Results_TypeID is the unique identifier for the type Connection_getEvent_Results.
const Connection_getEvent_Results_TypeID = 0xe84cea99f5f10902

func NewConnection_getEvent_Results(s *capnp.Segment) (Connection_getEvent_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Connection_getEvent_Results{st}, err
}

func NewRootConnection_getEvent_Results(s *capnp.Segment) (Connection_getEvent_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Connection_getEvent_Results{st}, err
}

func ReadRootConnection_getEvent_Results(msg *capnp.Message) (Connection_getEvent_Results, error) {
	root, err := msg.RootPtr()
	return Connection_getEvent_Results{root.Struct()}, err
}

func (s Connection_getEvent_Results) String() string {
	str, _ := text.Marshal(0xe84cea99f5f10902, s.Struct)
	return str
}

func (s Connection_getEvent_Results) Event() (Event, error) {
	p, err := s.Struct.Ptr(0)
	return Event{Struct: p.Struct()}, err
}

func (s Connection_getEvent_Results) HasEvent() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Connection_getEvent_Results) SetEvent(v Event) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewEvent sets the event field to a newly
// allocated Event struct, preferring placement in s's segment.
func (s Connection_getEvent_Results) NewEvent() (Event, error) {
	ss, err := NewEvent(s.Struct.Segment())
	if err != nil {
		return Event{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Connection_getEvent_Results_List is a list of Connection_getEvent_Results.
type Connection_getEvent_Results_List struct{ capnp.List }

// NewConnection_getEvent_Results creates a new list of Connection_getEvent_Results.
func NewConnection_getEvent_Results_List(s *capnp.Segment, sz int32) (Connection_getEvent_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Connection_getEvent_Results_List{l}, err
}

func (s Connection_getEvent_Results_List) At(i int) Connection_getEvent_Results {
	return Connection_getEvent_Results{s.List.Struct(i)}
}

func (s Connection_getEvent_Results_List) Set(i int, v Connection_getEvent_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Connection_getEvent_Results_List) String() string {
	str, _ := text.MarshalList(0xe84cea99f5f10902, s.List)
	return str
}

// Connection_getEvent_Results_Promise is a wrapper for a Connection_getEvent_Results promised by a client call.
type Connection_getEvent_Results_Promise struct{ *capnp.Pipeline }

func (p Connection_getEvent_Results_Promise) Struct() (Connection_getEvent_Results, error) {
	s, err := p.Pipeline.Struct()
	return Connection_getEvent_Results{s}, err
}

func (p Connection_getEvent_Results_Promise) Event() Event_Promise {
	return Event_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type Connection_getJob_Params struct{ capnp.Struct }

// Connection_getJob_Params_TypeID is the unique identifier for the type Connection_getJob_Params.
const Connection_getJob_Params_TypeID = 0xea6a21a6e04621e8

func NewConnection_getJob_Params(s *capnp.Segment) (Connection_getJob_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Connection_getJob_Params{st}, err
}

func NewRootConnection_getJob_Params(s *capnp.Segment) (Connection_getJob_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Connection_getJob_Params{st}, err
}

func ReadRootConnection_getJob_Params(msg *capnp.Message) (Connection_getJob_Params, error) {
	root, err := msg.RootPtr()
	return Connection_getJob_Params{root.Struct()}, err
}

func (s Connection_getJob_Params) String() string {
	str, _ := text.Marshal(0xea6a21a6e04621e8, s.Struct)
	return str
}

// Connection_getJob_Params_List is a list of Connection_getJob_Params.
type Connection_getJob_Params_List struct{ capnp.List }

// NewConnection_getJob_Params creates a new list of Connection_getJob_Params.
func NewConnection_getJob_Params_List(s *capnp.Segment, sz int32) (Connection_getJob_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Connection_getJob_Params_List{l}, err
}

func (s Connection_getJob_Params_List) At(i int) Connection_getJob_Params {
	return Connection_getJob_Params{s.List.Struct(i)}
}

func (s Connection_getJob_Params_List) Set(i int, v Connection_getJob_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Connection_getJob_Params_List) String() string {
	str, _ := text.MarshalList(0xea6a21a6e04621e8, s.List)
	return str
}

// Connection_getJob_Params_Promise is a wrapper for a Connection_getJob_Params promised by a client call.
type Connection_getJob_Params_Promise struct{ *capnp.Pipeline }

func (p Connection_getJob_Params_Promise) Struct() (Connection_getJob_Params, error) {
	s, err := p.Pipeline.Struct()
	return Connection_getJob_Params{s}, err
}

type Connection_getJob_Results struct{ capnp.Struct }

// Connection_getJob_Results_TypeID is the unique identifier for the type Connection_getJob_Results.
const Connection_getJob_Results_TypeID = 0xafa27e7eec8d315d

func NewConnection_getJob_Results(s *capnp.Segment) (Connection_getJob_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Connection_getJob_Results{st}, err
}

func NewRootConnection_getJob_Results(s *capnp.Segment) (Connection_getJob_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Connection_getJob_Results{st}, err
}

func ReadRootConnection_getJob_Results(msg *capnp.Message) (Connection_getJob_Results, error) {
	root, err := msg.RootPtr()
	return Connection_getJob_Results{root.Struct()}, err
}

func (s Connection_getJob_Results) String() string {
	str, _ := text.Marshal(0xafa27e7eec8d315d, s.Struct)
	return str
}

func (s Connection_getJob_Results) EventID() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Connection_getJob_Results) HasEventID() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Connection_getJob_Results) SetEventID(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s Connection_getJob_Results) AckID() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s Connection_getJob_Results) HasAckID() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Connection_getJob_Results) SetAckID(v []byte) error {
	return s.Struct.SetData(1, v)
}

// Connection_getJob_Results_List is a list of Connection_getJob_Results.
type Connection_getJob_Results_List struct{ capnp.List }

// NewConnection_getJob_Results creates a new list of Connection_getJob_Results.
func NewConnection_getJob_Results_List(s *capnp.Segment, sz int32) (Connection_getJob_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Connection_getJob_Results_List{l}, err
}

func (s Connection_getJob_Results_List) At(i int) Connection_getJob_Results {
	return Connection_getJob_Results{s.List.Struct(i)}
}

func (s Connection_getJob_Results_List) Set(i int, v Connection_getJob_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Connection_getJob_Results_List) String() string {
	str, _ := text.MarshalList(0xafa27e7eec8d315d, s.List)
	return str
}

// Connection_getJob_Results_Promise is a wrapper for a Connection_getJob_Results promised by a client call.
type Connection_getJob_Results_Promise struct{ *capnp.Pipeline }

func (p Connection_getJob_Results_Promise) Struct() (Connection_getJob_Results, error) {
	s, err := p.Pipeline.Struct()
	return Connection_getJob_Results{s}, err
}

type Connection_ackJob_Params struct{ capnp.Struct }

// Connection_ackJob_Params_TypeID is the unique identifier for the type Connection_ackJob_Params.
const Connection_ackJob_Params_TypeID = 0xbc929b168c2d35bc

func NewConnection_ackJob_Params(s *capnp.Segment) (Connection_ackJob_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Connection_ackJob_Params{st}, err
}

func NewRootConnection_ackJob_Params(s *capnp.Segment) (Connection_ackJob_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Connection_ackJob_Params{st}, err
}

func ReadRootConnection_ackJob_Params(msg *capnp.Message) (Connection_ackJob_Params, error) {
	root, err := msg.RootPtr()
	return Connection_ackJob_Params{root.Struct()}, err
}

func (s Connection_ackJob_Params) String() string {
	str, _ := text.Marshal(0xbc929b168c2d35bc, s.Struct)
	return str
}

func (s Connection_ackJob_Params) Event() (Event, error) {
	p, err := s.Struct.Ptr(0)
	return Event{Struct: p.Struct()}, err
}

func (s Connection_ackJob_Params) HasEvent() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Connection_ackJob_Params) SetEvent(v Event) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewEvent sets the event field to a newly
// allocated Event struct, preferring placement in s's segment.
func (s Connection_ackJob_Params) NewEvent() (Event, error) {
	ss, err := NewEvent(s.Struct.Segment())
	if err != nil {
		return Event{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Connection_ackJob_Params) AckID() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s Connection_ackJob_Params) HasAckID() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Connection_ackJob_Params) SetAckID(v []byte) error {
	return s.Struct.SetData(1, v)
}

// Connection_ackJob_Params_List is a list of Connection_ackJob_Params.
type Connection_ackJob_Params_List struct{ capnp.List }

// NewConnection_ackJob_Params creates a new list of Connection_ackJob_Params.
func NewConnection_ackJob_Params_List(s *capnp.Segment, sz int32) (Connection_ackJob_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Connection_ackJob_Params_List{l}, err
}

func (s Connection_ackJob_Params_List) At(i int) Connection_ackJob_Params {
	return Connection_ackJob_Params{s.List.Struct(i)}
}

func (s Connection_ackJob_Params_List) Set(i int, v Connection_ackJob_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Connection_ackJob_Params_List) String() string {
	str, _ := text.MarshalList(0xbc929b168c2d35bc, s.List)
	return str
}

// Connection_ackJob_Params_Promise is a wrapper for a Connection_ackJob_Params promised by a client call.
type Connection_ackJob_Params_Promise struct{ *capnp.Pipeline }

func (p Connection_ackJob_Params_Promise) Struct() (Connection_ackJob_Params, error) {
	s, err := p.Pipeline.Struct()
	return Connection_ackJob_Params{s}, err
}

func (p Connection_ackJob_Params_Promise) Event() Event_Promise {
	return Event_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type Connection_ackJob_Results struct{ capnp.Struct }

// Connection_ackJob_Results_TypeID is the unique identifier for the type Connection_ackJob_Results.
const Connection_ackJob_Results_TypeID = 0x9824c247770da692

func NewConnection_ackJob_Results(s *capnp.Segment) (Connection_ackJob_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Connection_ackJob_Results{st}, err
}

func NewRootConnection_ackJob_Results(s *capnp.Segment) (Connection_ackJob_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Connection_ackJob_Results{st}, err
}

func ReadRootConnection_ackJob_Results(msg *capnp.Message) (Connection_ackJob_Results, error) {
	root, err := msg.RootPtr()
	return Connection_ackJob_Results{root.Struct()}, err
}

func (s Connection_ackJob_Results) String() string {
	str, _ := text.Marshal(0x9824c247770da692, s.Struct)
	return str
}

func (s Connection_ackJob_Results) Acked() bool {
	return s.Struct.Bit(0)
}

func (s Connection_ackJob_Results) SetAcked(v bool) {
	s.Struct.SetBit(0, v)
}

// Connection_ackJob_Results_List is a list of Connection_ackJob_Results.
type Connection_ackJob_Results_List struct{ capnp.List }

// NewConnection_ackJob_Results creates a new list of Connection_ackJob_Results.
func NewConnection_ackJob_Results_List(s *capnp.Segment, sz int32) (Connection_ackJob_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return Connection_ackJob_Results_List{l}, err
}

func (s Connection_ackJob_Results_List) At(i int) Connection_ackJob_Results {
	return Connection_ackJob_Results{s.List.Struct(i)}
}

func (s Connection_ackJob_Results_List) Set(i int, v Connection_ackJob_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Connection_ackJob_Results_List) String() string {
	str, _ := text.MarshalList(0x9824c247770da692, s.List)
	return str
}

// Connection_ackJob_Results_Promise is a wrapper for a Connection_ackJob_Results promised by a client call.
type Connection_ackJob_Results_Promise struct{ *capnp.Pipeline }

func (p Connection_ackJob_Results_Promise) Struct() (Connection_ackJob_Results, error) {
	s, err := p.Pipeline.Struct()
	return Connection_ackJob_Results{s}, err
}

type Workflow struct{ Client capnp.Client }

// Workflow_TypeID is the unique identifier for the type Workflow.
const Workflow_TypeID = 0xa35d193330adceaf

func (c Workflow) Connect(ctx context.Context, params func(Workflow_connect_Params) error, opts ...capnp.CallOption) Workflow_connect_Results_Promise {
	if c.Client == nil {
		return Workflow_connect_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xa35d193330adceaf,
			MethodID:      0,
			InterfaceName: "job.capnp:Workflow",
			MethodName:    "connect",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Workflow_connect_Params{Struct: s}) }
	}
	return Workflow_connect_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Workflow) GetEventAllVersions(ctx context.Context, params func(Workflow_getEventAllVersions_Params) error, opts ...capnp.CallOption) Workflow_getEventAllVersions_Results_Promise {
	if c.Client == nil {
		return Workflow_getEventAllVersions_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xa35d193330adceaf,
			MethodID:      1,
			InterfaceName: "job.capnp:Workflow",
			MethodName:    "getEventAllVersions",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Workflow_getEventAllVersions_Params{Struct: s}) }
	}
	return Workflow_getEventAllVersions_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Workflow) GetQueue(ctx context.Context, params func(Workflow_getQueue_Params) error, opts ...capnp.CallOption) Workflow_getQueue_Results_Promise {
	if c.Client == nil {
		return Workflow_getQueue_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xa35d193330adceaf,
			MethodID:      2,
			InterfaceName: "job.capnp:Workflow",
			MethodName:    "getQueue",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Workflow_getQueue_Params{Struct: s}) }
	}
	return Workflow_getQueue_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Workflow) GetQueues(ctx context.Context, params func(Workflow_getQueues_Params) error, opts ...capnp.CallOption) Workflow_getQueues_Results_Promise {
	if c.Client == nil {
		return Workflow_getQueues_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xa35d193330adceaf,
			MethodID:      3,
			InterfaceName: "job.capnp:Workflow",
			MethodName:    "getQueues",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Workflow_getQueues_Params{Struct: s}) }
	}
	return Workflow_getQueues_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Workflow) GetLatestEventID(ctx context.Context, params func(Workflow_getLatestEventID_Params) error, opts ...capnp.CallOption) Workflow_getLatestEventID_Results_Promise {
	if c.Client == nil {
		return Workflow_getLatestEventID_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xa35d193330adceaf,
			MethodID:      4,
			InterfaceName: "job.capnp:Workflow",
			MethodName:    "getLatestEventID",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Workflow_getLatestEventID_Params{Struct: s}) }
	}
	return Workflow_getLatestEventID_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}

type Workflow_Server interface {
	Connect(Workflow_connect) error

	GetEventAllVersions(Workflow_getEventAllVersions) error

	GetQueue(Workflow_getQueue) error

	GetQueues(Workflow_getQueues) error

	GetLatestEventID(Workflow_getLatestEventID) error
}

func Workflow_ServerToClient(s Workflow_Server) Workflow {
	c, _ := s.(server.Closer)
	return Workflow{Client: server.New(Workflow_Methods(nil, s), c)}
}

func Workflow_Methods(methods []server.Method, s Workflow_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 5)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa35d193330adceaf,
			MethodID:      0,
			InterfaceName: "job.capnp:Workflow",
			MethodName:    "connect",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Workflow_connect{c, opts, Workflow_connect_Params{Struct: p}, Workflow_connect_Results{Struct: r}}
			return s.Connect(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa35d193330adceaf,
			MethodID:      1,
			InterfaceName: "job.capnp:Workflow",
			MethodName:    "getEventAllVersions",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Workflow_getEventAllVersions{c, opts, Workflow_getEventAllVersions_Params{Struct: p}, Workflow_getEventAllVersions_Results{Struct: r}}
			return s.GetEventAllVersions(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa35d193330adceaf,
			MethodID:      2,
			InterfaceName: "job.capnp:Workflow",
			MethodName:    "getQueue",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Workflow_getQueue{c, opts, Workflow_getQueue_Params{Struct: p}, Workflow_getQueue_Results{Struct: r}}
			return s.GetQueue(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa35d193330adceaf,
			MethodID:      3,
			InterfaceName: "job.capnp:Workflow",
			MethodName:    "getQueues",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Workflow_getQueues{c, opts, Workflow_getQueues_Params{Struct: p}, Workflow_getQueues_Results{Struct: r}}
			return s.GetQueues(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa35d193330adceaf,
			MethodID:      4,
			InterfaceName: "job.capnp:Workflow",
			MethodName:    "getLatestEventID",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Workflow_getLatestEventID{c, opts, Workflow_getLatestEventID_Params{Struct: p}, Workflow_getLatestEventID_Results{Struct: r}}
			return s.GetLatestEventID(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	return methods
}

// Workflow_connect holds the arguments for a server call to Workflow.connect.
type Workflow_connect struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Workflow_connect_Params
	Results Workflow_connect_Results
}

// Workflow_getEventAllVersions holds the arguments for a server call to Workflow.getEventAllVersions.
type Workflow_getEventAllVersions struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Workflow_getEventAllVersions_Params
	Results Workflow_getEventAllVersions_Results
}

// Workflow_getQueue holds the arguments for a server call to Workflow.getQueue.
type Workflow_getQueue struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Workflow_getQueue_Params
	Results Workflow_getQueue_Results
}

// Workflow_getQueues holds the arguments for a server call to Workflow.getQueues.
type Workflow_getQueues struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Workflow_getQueues_Params
	Results Workflow_getQueues_Results
}

// Workflow_getLatestEventID holds the arguments for a server call to Workflow.getLatestEventID.
type Workflow_getLatestEventID struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Workflow_getLatestEventID_Params
	Results Workflow_getLatestEventID_Results
}

type Workflow_connect_Params struct{ capnp.Struct }

// Workflow_connect_Params_TypeID is the unique identifier for the type Workflow_connect_Params.
const Workflow_connect_Params_TypeID = 0xfb7429c9d23d519b

func NewWorkflow_connect_Params(s *capnp.Segment) (Workflow_connect_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Workflow_connect_Params{st}, err
}

func NewRootWorkflow_connect_Params(s *capnp.Segment) (Workflow_connect_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Workflow_connect_Params{st}, err
}

func ReadRootWorkflow_connect_Params(msg *capnp.Message) (Workflow_connect_Params, error) {
	root, err := msg.RootPtr()
	return Workflow_connect_Params{root.Struct()}, err
}

func (s Workflow_connect_Params) String() string {
	str, _ := text.Marshal(0xfb7429c9d23d519b, s.Struct)
	return str
}

func (s Workflow_connect_Params) FlowID() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Workflow_connect_Params) HasFlowID() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Workflow_connect_Params) SetFlowID(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s Workflow_connect_Params) WorkerID() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s Workflow_connect_Params) HasWorkerID() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Workflow_connect_Params) SetWorkerID(v []byte) error {
	return s.Struct.SetData(1, v)
}

// Workflow_connect_Params_List is a list of Workflow_connect_Params.
type Workflow_connect_Params_List struct{ capnp.List }

// NewWorkflow_connect_Params creates a new list of Workflow_connect_Params.
func NewWorkflow_connect_Params_List(s *capnp.Segment, sz int32) (Workflow_connect_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Workflow_connect_Params_List{l}, err
}

func (s Workflow_connect_Params_List) At(i int) Workflow_connect_Params {
	return Workflow_connect_Params{s.List.Struct(i)}
}

func (s Workflow_connect_Params_List) Set(i int, v Workflow_connect_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Workflow_connect_Params_List) String() string {
	str, _ := text.MarshalList(0xfb7429c9d23d519b, s.List)
	return str
}

// Workflow_connect_Params_Promise is a wrapper for a Workflow_connect_Params promised by a client call.
type Workflow_connect_Params_Promise struct{ *capnp.Pipeline }

func (p Workflow_connect_Params_Promise) Struct() (Workflow_connect_Params, error) {
	s, err := p.Pipeline.Struct()
	return Workflow_connect_Params{s}, err
}

type Workflow_connect_Results struct{ capnp.Struct }

// Workflow_connect_Results_TypeID is the unique identifier for the type Workflow_connect_Results.
const Workflow_connect_Results_TypeID = 0x8bcafe9abfa2fdc5

func NewWorkflow_connect_Results(s *capnp.Segment) (Workflow_connect_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Workflow_connect_Results{st}, err
}

func NewRootWorkflow_connect_Results(s *capnp.Segment) (Workflow_connect_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Workflow_connect_Results{st}, err
}

func ReadRootWorkflow_connect_Results(msg *capnp.Message) (Workflow_connect_Results, error) {
	root, err := msg.RootPtr()
	return Workflow_connect_Results{root.Struct()}, err
}

func (s Workflow_connect_Results) String() string {
	str, _ := text.Marshal(0x8bcafe9abfa2fdc5, s.Struct)
	return str
}

func (s Workflow_connect_Results) Connection() Connection {
	p, _ := s.Struct.Ptr(0)
	return Connection{Client: p.Interface().Client()}
}

func (s Workflow_connect_Results) HasConnection() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Workflow_connect_Results) SetConnection(v Connection) error {
	if v.Client == nil {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// Workflow_connect_Results_List is a list of Workflow_connect_Results.
type Workflow_connect_Results_List struct{ capnp.List }

// NewWorkflow_connect_Results creates a new list of Workflow_connect_Results.
func NewWorkflow_connect_Results_List(s *capnp.Segment, sz int32) (Workflow_connect_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Workflow_connect_Results_List{l}, err
}

func (s Workflow_connect_Results_List) At(i int) Workflow_connect_Results {
	return Workflow_connect_Results{s.List.Struct(i)}
}

func (s Workflow_connect_Results_List) Set(i int, v Workflow_connect_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Workflow_connect_Results_List) String() string {
	str, _ := text.MarshalList(0x8bcafe9abfa2fdc5, s.List)
	return str
}

// Workflow_connect_Results_Promise is a wrapper for a Workflow_connect_Results promised by a client call.
type Workflow_connect_Results_Promise struct{ *capnp.Pipeline }

func (p Workflow_connect_Results_Promise) Struct() (Workflow_connect_Results, error) {
	s, err := p.Pipeline.Struct()
	return Workflow_connect_Results{s}, err
}

func (p Workflow_connect_Results_Promise) Connection() Connection {
	return Connection{Client: p.Pipeline.GetPipeline(0).Client()}
}

type Workflow_getEventAllVersions_Params struct{ capnp.Struct }

// Workflow_getEventAllVersions_Params_TypeID is the unique identifier for the type Workflow_getEventAllVersions_Params.
const Workflow_getEventAllVersions_Params_TypeID = 0x8c160cee2c28c32f

func NewWorkflow_getEventAllVersions_Params(s *capnp.Segment) (Workflow_getEventAllVersions_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Workflow_getEventAllVersions_Params{st}, err
}

func NewRootWorkflow_getEventAllVersions_Params(s *capnp.Segment) (Workflow_getEventAllVersions_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Workflow_getEventAllVersions_Params{st}, err
}

func ReadRootWorkflow_getEventAllVersions_Params(msg *capnp.Message) (Workflow_getEventAllVersions_Params, error) {
	root, err := msg.RootPtr()
	return Workflow_getEventAllVersions_Params{root.Struct()}, err
}

func (s Workflow_getEventAllVersions_Params) String() string {
	str, _ := text.Marshal(0x8c160cee2c28c32f, s.Struct)
	return str
}

func (s Workflow_getEventAllVersions_Params) EventID() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Workflow_getEventAllVersions_Params) HasEventID() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Workflow_getEventAllVersions_Params) SetEventID(v []byte) error {
	return s.Struct.SetData(0, v)
}

// Workflow_getEventAllVersions_Params_List is a list of Workflow_getEventAllVersions_Params.
type Workflow_getEventAllVersions_Params_List struct{ capnp.List }

// NewWorkflow_getEventAllVersions_Params creates a new list of Workflow_getEventAllVersions_Params.
func NewWorkflow_getEventAllVersions_Params_List(s *capnp.Segment, sz int32) (Workflow_getEventAllVersions_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Workflow_getEventAllVersions_Params_List{l}, err
}

func (s Workflow_getEventAllVersions_Params_List) At(i int) Workflow_getEventAllVersions_Params {
	return Workflow_getEventAllVersions_Params{s.List.Struct(i)}
}

func (s Workflow_getEventAllVersions_Params_List) Set(i int, v Workflow_getEventAllVersions_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Workflow_getEventAllVersions_Params_List) String() string {
	str, _ := text.MarshalList(0x8c160cee2c28c32f, s.List)
	return str
}

// Workflow_getEventAllVersions_Params_Promise is a wrapper for a Workflow_getEventAllVersions_Params promised by a client call.
type Workflow_getEventAllVersions_Params_Promise struct{ *capnp.Pipeline }

func (p Workflow_getEventAllVersions_Params_Promise) Struct() (Workflow_getEventAllVersions_Params, error) {
	s, err := p.Pipeline.Struct()
	return Workflow_getEventAllVersions_Params{s}, err
}

type Workflow_getEventAllVersions_Results struct{ capnp.Struct }

// Workflow_getEventAllVersions_Results_TypeID is the unique identifier for the type Workflow_getEventAllVersions_Results.
const Workflow_getEventAllVersions_Results_TypeID = 0xa6863ad17f79d808

func NewWorkflow_getEventAllVersions_Results(s *capnp.Segment) (Workflow_getEventAllVersions_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Workflow_getEventAllVersions_Results{st}, err
}

func NewRootWorkflow_getEventAllVersions_Results(s *capnp.Segment) (Workflow_getEventAllVersions_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Workflow_getEventAllVersions_Results{st}, err
}

func ReadRootWorkflow_getEventAllVersions_Results(msg *capnp.Message) (Workflow_getEventAllVersions_Results, error) {
	root, err := msg.RootPtr()
	return Workflow_getEventAllVersions_Results{root.Struct()}, err
}

func (s Workflow_getEventAllVersions_Results) String() string {
	str, _ := text.Marshal(0xa6863ad17f79d808, s.Struct)
	return str
}

func (s Workflow_getEventAllVersions_Results) Events() (Event_List, error) {
	p, err := s.Struct.Ptr(0)
	return Event_List{List: p.List()}, err
}

func (s Workflow_getEventAllVersions_Results) HasEvents() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Workflow_getEventAllVersions_Results) SetEvents(v Event_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewEvents sets the events field to a newly
// allocated Event_List, preferring placement in s's segment.
func (s Workflow_getEventAllVersions_Results) NewEvents(n int32) (Event_List, error) {
	l, err := NewEvent_List(s.Struct.Segment(), n)
	if err != nil {
		return Event_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Workflow_getEventAllVersions_Results_List is a list of Workflow_getEventAllVersions_Results.
type Workflow_getEventAllVersions_Results_List struct{ capnp.List }

// NewWorkflow_getEventAllVersions_Results creates a new list of Workflow_getEventAllVersions_Results.
func NewWorkflow_getEventAllVersions_Results_List(s *capnp.Segment, sz int32) (Workflow_getEventAllVersions_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Workflow_getEventAllVersions_Results_List{l}, err
}

func (s Workflow_getEventAllVersions_Results_List) At(i int) Workflow_getEventAllVersions_Results {
	return Workflow_getEventAllVersions_Results{s.List.Struct(i)}
}

func (s Workflow_getEventAllVersions_Results_List) Set(i int, v Workflow_getEventAllVersions_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Workflow_getEventAllVersions_Results_List) String() string {
	str, _ := text.MarshalList(0xa6863ad17f79d808, s.List)
	return str
}

// Workflow_getEventAllVersions_Results_Promise is a wrapper for a Workflow_getEventAllVersions_Results promised by a client call.
type Workflow_getEventAllVersions_Results_Promise struct{ *capnp.Pipeline }

func (p Workflow_getEventAllVersions_Results_Promise) Struct() (Workflow_getEventAllVersions_Results, error) {
	s, err := p.Pipeline.Struct()
	return Workflow_getEventAllVersions_Results{s}, err
}

type Workflow_getQueue_Params struct{ capnp.Struct }

// Workflow_getQueue_Params_TypeID is the unique identifier for the type Workflow_getQueue_Params.
const Workflow_getQueue_Params_TypeID = 0xcc590b8e644c6381

func NewWorkflow_getQueue_Params(s *capnp.Segment) (Workflow_getQueue_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Workflow_getQueue_Params{st}, err
}

func NewRootWorkflow_getQueue_Params(s *capnp.Segment) (Workflow_getQueue_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Workflow_getQueue_Params{st}, err
}

func ReadRootWorkflow_getQueue_Params(msg *capnp.Message) (Workflow_getQueue_Params, error) {
	root, err := msg.RootPtr()
	return Workflow_getQueue_Params{root.Struct()}, err
}

func (s Workflow_getQueue_Params) String() string {
	str, _ := text.Marshal(0xcc590b8e644c6381, s.Struct)
	return str
}

func (s Workflow_getQueue_Params) WorkerID() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Workflow_getQueue_Params) HasWorkerID() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Workflow_getQueue_Params) SetWorkerID(v []byte) error {
	return s.Struct.SetData(0, v)
}

// Workflow_getQueue_Params_List is a list of Workflow_getQueue_Params.
type Workflow_getQueue_Params_List struct{ capnp.List }

// NewWorkflow_getQueue_Params creates a new list of Workflow_getQueue_Params.
func NewWorkflow_getQueue_Params_List(s *capnp.Segment, sz int32) (Workflow_getQueue_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Workflow_getQueue_Params_List{l}, err
}

func (s Workflow_getQueue_Params_List) At(i int) Workflow_getQueue_Params {
	return Workflow_getQueue_Params{s.List.Struct(i)}
}

func (s Workflow_getQueue_Params_List) Set(i int, v Workflow_getQueue_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Workflow_getQueue_Params_List) String() string {
	str, _ := text.MarshalList(0xcc590b8e644c6381, s.List)
	return str
}

// Workflow_getQueue_Params_Promise is a wrapper for a Workflow_getQueue_Params promised by a client call.
type Workflow_getQueue_Params_Promise struct{ *capnp.Pipeline }

func (p Workflow_getQueue_Params_Promise) Struct() (Workflow_getQueue_Params, error) {
	s, err := p.Pipeline.Struct()
	return Workflow_getQueue_Params{s}, err
}

type Workflow_getQueue_Results struct{ capnp.Struct }

// Workflow_getQueue_Results_TypeID is the unique identifier for the type Workflow_getQueue_Results.
const Workflow_getQueue_Results_TypeID = 0xc6682ec0740925e5

func NewWorkflow_getQueue_Results(s *capnp.Segment) (Workflow_getQueue_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Workflow_getQueue_Results{st}, err
}

func NewRootWorkflow_getQueue_Results(s *capnp.Segment) (Workflow_getQueue_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Workflow_getQueue_Results{st}, err
}

func ReadRootWorkflow_getQueue_Results(msg *capnp.Message) (Workflow_getQueue_Results, error) {
	root, err := msg.RootPtr()
	return Workflow_getQueue_Results{root.Struct()}, err
}

func (s Workflow_getQueue_Results) String() string {
	str, _ := text.Marshal(0xc6682ec0740925e5, s.Struct)
	return str
}

func (s Workflow_getQueue_Results) Queue() (Queue, error) {
	p, err := s.Struct.Ptr(0)
	return Queue{Struct: p.Struct()}, err
}

func (s Workflow_getQueue_Results) HasQueue() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Workflow_getQueue_Results) SetQueue(v Queue) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewQueue sets the queue field to a newly
// allocated Queue struct, preferring placement in s's segment.
func (s Workflow_getQueue_Results) NewQueue() (Queue, error) {
	ss, err := NewQueue(s.Struct.Segment())
	if err != nil {
		return Queue{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Workflow_getQueue_Results_List is a list of Workflow_getQueue_Results.
type Workflow_getQueue_Results_List struct{ capnp.List }

// NewWorkflow_getQueue_Results creates a new list of Workflow_getQueue_Results.
func NewWorkflow_getQueue_Results_List(s *capnp.Segment, sz int32) (Workflow_getQueue_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Workflow_getQueue_Results_List{l}, err
}

func (s Workflow_getQueue_Results_List) At(i int) Workflow_getQueue_Results {
	return Workflow_getQueue_Results{s.List.Struct(i)}
}

func (s Workflow_getQueue_Results_List) Set(i int, v Workflow_getQueue_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Workflow_getQueue_Results_List) String() string {
	str, _ := text.MarshalList(0xc6682ec0740925e5, s.List)
	return str
}

// Workflow_getQueue_Results_Promise is a wrapper for a Workflow_getQueue_Results promised by a client call.
type Workflow_getQueue_Results_Promise struct{ *capnp.Pipeline }

func (p Workflow_getQueue_Results_Promise) Struct() (Workflow_getQueue_Results, error) {
	s, err := p.Pipeline.Struct()
	return Workflow_getQueue_Results{s}, err
}

func (p Workflow_getQueue_Results_Promise) Queue() Queue_Promise {
	return Queue_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type Workflow_getQueues_Params struct{ capnp.Struct }

// Workflow_getQueues_Params_TypeID is the unique identifier for the type Workflow_getQueues_Params.
const Workflow_getQueues_Params_TypeID = 0x814b25c6a90ab3fd

func NewWorkflow_getQueues_Params(s *capnp.Segment) (Workflow_getQueues_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Workflow_getQueues_Params{st}, err
}

func NewRootWorkflow_getQueues_Params(s *capnp.Segment) (Workflow_getQueues_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Workflow_getQueues_Params{st}, err
}

func ReadRootWorkflow_getQueues_Params(msg *capnp.Message) (Workflow_getQueues_Params, error) {
	root, err := msg.RootPtr()
	return Workflow_getQueues_Params{root.Struct()}, err
}

func (s Workflow_getQueues_Params) String() string {
	str, _ := text.Marshal(0x814b25c6a90ab3fd, s.Struct)
	return str
}

// Workflow_getQueues_Params_List is a list of Workflow_getQueues_Params.
type Workflow_getQueues_Params_List struct{ capnp.List }

// NewWorkflow_getQueues_Params creates a new list of Workflow_getQueues_Params.
func NewWorkflow_getQueues_Params_List(s *capnp.Segment, sz int32) (Workflow_getQueues_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Workflow_getQueues_Params_List{l}, err
}

func (s Workflow_getQueues_Params_List) At(i int) Workflow_getQueues_Params {
	return Workflow_getQueues_Params{s.List.Struct(i)}
}

func (s Workflow_getQueues_Params_List) Set(i int, v Workflow_getQueues_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Workflow_getQueues_Params_List) String() string {
	str, _ := text.MarshalList(0x814b25c6a90ab3fd, s.List)
	return str
}

// Workflow_getQueues_Params_Promise is a wrapper for a Workflow_getQueues_Params promised by a client call.
type Workflow_getQueues_Params_Promise struct{ *capnp.Pipeline }

func (p Workflow_getQueues_Params_Promise) Struct() (Workflow_getQueues_Params, error) {
	s, err := p.Pipeline.Struct()
	return Workflow_getQueues_Params{s}, err
}

type Workflow_getQueues_Results struct{ capnp.Struct }

// Workflow_getQueues_Results_TypeID is the unique identifier for the type Workflow_getQueues_Results.
const Workflow_getQueues_Results_TypeID = 0x90eb69d2aa988bfb

func NewWorkflow_getQueues_Results(s *capnp.Segment) (Workflow_getQueues_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Workflow_getQueues_Results{st}, err
}

func NewRootWorkflow_getQueues_Results(s *capnp.Segment) (Workflow_getQueues_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Workflow_getQueues_Results{st}, err
}

func ReadRootWorkflow_getQueues_Results(msg *capnp.Message) (Workflow_getQueues_Results, error) {
	root, err := msg.RootPtr()
	return Workflow_getQueues_Results{root.Struct()}, err
}

func (s Workflow_getQueues_Results) String() string {
	str, _ := text.Marshal(0x90eb69d2aa988bfb, s.Struct)
	return str
}

func (s Workflow_getQueues_Results) Queues() (Queue_List, error) {
	p, err := s.Struct.Ptr(0)
	return Queue_List{List: p.List()}, err
}

func (s Workflow_getQueues_Results) HasQueues() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Workflow_getQueues_Results) SetQueues(v Queue_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewQueues sets the queues field to a newly
// allocated Queue_List, preferring placement in s's segment.
func (s Workflow_getQueues_Results) NewQueues(n int32) (Queue_List, error) {
	l, err := NewQueue_List(s.Struct.Segment(), n)
	if err != nil {
		return Queue_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Workflow_getQueues_Results_List is a list of Workflow_getQueues_Results.
type Workflow_getQueues_Results_List struct{ capnp.List }

// NewWorkflow_getQueues_Results creates a new list of Workflow_getQueues_Results.
func NewWorkflow_getQueues_Results_List(s *capnp.Segment, sz int32) (Workflow_getQueues_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Workflow_getQueues_Results_List{l}, err
}

func (s Workflow_getQueues_Results_List) At(i int) Workflow_getQueues_Results {
	return Workflow_getQueues_Results{s.List.Struct(i)}
}

func (s Workflow_getQueues_Results_List) Set(i int, v Workflow_getQueues_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Workflow_getQueues_Results_List) String() string {
	str, _ := text.MarshalList(0x90eb69d2aa988bfb, s.List)
	return str
}

// Workflow_getQueues_Results_Promise is a wrapper for a Workflow_getQueues_Results promised by a client call.
type Workflow_getQueues_Results_Promise struct{ *capnp.Pipeline }

func (p Workflow_getQueues_Results_Promise) Struct() (Workflow_getQueues_Results, error) {
	s, err := p.Pipeline.Struct()
	return Workflow_getQueues_Results{s}, err
}

type Workflow_getLatestEventID_Params struct{ capnp.Struct }

// Workflow_getLatestEventID_Params_TypeID is the unique identifier for the type Workflow_getLatestEventID_Params.
const Workflow_getLatestEventID_Params_TypeID = 0x8dde89bb27860684

func NewWorkflow_getLatestEventID_Params(s *capnp.Segment) (Workflow_getLatestEventID_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Workflow_getLatestEventID_Params{st}, err
}

func NewRootWorkflow_getLatestEventID_Params(s *capnp.Segment) (Workflow_getLatestEventID_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Workflow_getLatestEventID_Params{st}, err
}

func ReadRootWorkflow_getLatestEventID_Params(msg *capnp.Message) (Workflow_getLatestEventID_Params, error) {
	root, err := msg.RootPtr()
	return Workflow_getLatestEventID_Params{root.Struct()}, err
}

func (s Workflow_getLatestEventID_Params) String() string {
	str, _ := text.Marshal(0x8dde89bb27860684, s.Struct)
	return str
}

func (s Workflow_getLatestEventID_Params) FlowID() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Workflow_getLatestEventID_Params) HasFlowID() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Workflow_getLatestEventID_Params) SetFlowID(v []byte) error {
	return s.Struct.SetData(0, v)
}

// Workflow_getLatestEventID_Params_List is a list of Workflow_getLatestEventID_Params.
type Workflow_getLatestEventID_Params_List struct{ capnp.List }

// NewWorkflow_getLatestEventID_Params creates a new list of Workflow_getLatestEventID_Params.
func NewWorkflow_getLatestEventID_Params_List(s *capnp.Segment, sz int32) (Workflow_getLatestEventID_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Workflow_getLatestEventID_Params_List{l}, err
}

func (s Workflow_getLatestEventID_Params_List) At(i int) Workflow_getLatestEventID_Params {
	return Workflow_getLatestEventID_Params{s.List.Struct(i)}
}

func (s Workflow_getLatestEventID_Params_List) Set(i int, v Workflow_getLatestEventID_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Workflow_getLatestEventID_Params_List) String() string {
	str, _ := text.MarshalList(0x8dde89bb27860684, s.List)
	return str
}

// Workflow_getLatestEventID_Params_Promise is a wrapper for a Workflow_getLatestEventID_Params promised by a client call.
type Workflow_getLatestEventID_Params_Promise struct{ *capnp.Pipeline }

func (p Workflow_getLatestEventID_Params_Promise) Struct() (Workflow_getLatestEventID_Params, error) {
	s, err := p.Pipeline.Struct()
	return Workflow_getLatestEventID_Params{s}, err
}

type Workflow_getLatestEventID_Results struct{ capnp.Struct }

// Workflow_getLatestEventID_Results_TypeID is the unique identifier for the type Workflow_getLatestEventID_Results.
const Workflow_getLatestEventID_Results_TypeID = 0xb222156f3117892c

func NewWorkflow_getLatestEventID_Results(s *capnp.Segment) (Workflow_getLatestEventID_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Workflow_getLatestEventID_Results{st}, err
}

func NewRootWorkflow_getLatestEventID_Results(s *capnp.Segment) (Workflow_getLatestEventID_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Workflow_getLatestEventID_Results{st}, err
}

func ReadRootWorkflow_getLatestEventID_Results(msg *capnp.Message) (Workflow_getLatestEventID_Results, error) {
	root, err := msg.RootPtr()
	return Workflow_getLatestEventID_Results{root.Struct()}, err
}

func (s Workflow_getLatestEventID_Results) String() string {
	str, _ := text.Marshal(0xb222156f3117892c, s.Struct)
	return str
}

func (s Workflow_getLatestEventID_Results) EventID() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Workflow_getLatestEventID_Results) HasEventID() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Workflow_getLatestEventID_Results) SetEventID(v []byte) error {
	return s.Struct.SetData(0, v)
}

// Workflow_getLatestEventID_Results_List is a list of Workflow_getLatestEventID_Results.
type Workflow_getLatestEventID_Results_List struct{ capnp.List }

// NewWorkflow_getLatestEventID_Results creates a new list of Workflow_getLatestEventID_Results.
func NewWorkflow_getLatestEventID_Results_List(s *capnp.Segment, sz int32) (Workflow_getLatestEventID_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Workflow_getLatestEventID_Results_List{l}, err
}

func (s Workflow_getLatestEventID_Results_List) At(i int) Workflow_getLatestEventID_Results {
	return Workflow_getLatestEventID_Results{s.List.Struct(i)}
}

func (s Workflow_getLatestEventID_Results_List) Set(i int, v Workflow_getLatestEventID_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Workflow_getLatestEventID_Results_List) String() string {
	str, _ := text.MarshalList(0xb222156f3117892c, s.List)
	return str
}

// Workflow_getLatestEventID_Results_Promise is a wrapper for a Workflow_getLatestEventID_Results promised by a client call.
type Workflow_getLatestEventID_Results_Promise struct{ *capnp.Pipeline }

func (p Workflow_getLatestEventID_Results_Promise) Struct() (Workflow_getLatestEventID_Results, error) {
	s, err := p.Pipeline.Struct()
	return Workflow_getLatestEventID_Results{s}, err
}

const schema_d598217bc368711c = "x\xda\xa4Wol\x14\xd5\x16?\xe7\xce\xcc\xce\xce\xb6" +
	"\xfb\xda\xcb\x14x\x8f\xbc\xa4i\xb3\xe4Q\xd2\xf6\xb5\x05" +
	"\x0cn\xc4\x85\x8a\x90-`vj\xc0\x88b\x9c\xb6#" +
	",\xdd\xee\x96\x9dYj1\x05!@,\x7f\x94\x92\x90" +
	"\xf0'&\x8a\x91\x04\x12\xc1\xe8\x07\x8cbTHI " +
	"\xfc\x89$\x18\x12#\xf1\x83DDcB\"&\x86\xd4" +
	"1\xf7\xce\xce\xec\xec\xb2m\x05\xbf\xed\xce\x9c\xf3\xbb\xe7" +
	"\x9c\xdf9\xbfs\xa7\xa5R\\HZ%[\x01\xd0," +
	")`\x8f}\x1c:~~\xe6\xb2\xad@U\x04\x10e" +
	"\x809\xb7\xc4z\x04\xd1\x0e\xf5\xbd\xb0\xb9\xee\xd3\xb7v" +
	"\x00\x9d\x8a\x00\x12\xb2W\x97\xc5\xd9\x08\xa8^\x17c\x80" +
	"\xf6\xb2\xb3\xa3b|W\xfc\x0d\xc7\x80\xbb\xde\x13\xdb\x98" +
	"\xeb\xe8\xd8\xd1/\x0e\xffyq\xb7\x03\xea\xb8~'\xce" +
	"`\xae\xb7\xb8\xeb\xd5\xdf\xae\xee{\xa9\xf2\x87\xdd\xa0\x85" +
	"\x10\xed\xffnXw\xee\xb5\xba\x83\xd7\x1dKU\x91\xb6" +
	"\xa9a\xc9\xf95\x00h\xff\xff\xdc\xac\xc6_+\xa7\xed" +
	"\xf1\xa3\xf5IY\x866(1\xb4\xed\x81\x9d\xff\xfbl" +
	"\xf8\xe6^\xbf\xc1!i53x\x9f\x1b\xdc\xdf}\xf0" +
	"\xc4\xb5\xe4\xcf\xfb\xfc\x06\xa3\x12O\xe527\xd8\x7f," +
	"<\xb0\xf4l\xe4 hS\xd1\xcdeL\xaag\x06R" +
	"\x80\x19\x9c\xba\xf2A\xcb\x9c\xff\xacy\x0fhH(\xc4" +
	"\x0b\xa8\xce\x0c\x1cV\x9b\x02\xcc\xbe!\xb0\x14UE\x96" +
	"\x01\xec\xe0\x8d\xc1-_Gw\x1e\xf3\x9fw7\xb0\x89" +
	"\xc1\x8dq\xb85\xad{\x7f\xd9\xbc\xf9\xe8\xa9|m\x09" +
	"3h\x92\xf9y\xf3d\x96s\xe3\xf0\xf4\xd6\xcc\xd4\xfa" +
	"\x8f\xfc\x08#r\x173x[f\x08g\xe65\xed\x99" +
	"vd\xff\x19?\xc2\xe72/\xf1(G\xb85S\xb1" +
	"\xbel^w\xde\x8fP\x17\xe4G4\x04\x19\xc2\x90\x19" +
	"V\x9e\xfc\xf6\xea\x05?\xbf\xf1`\x073X\xc9\x0d\xb6" +
	"v/\xefy\xb3\xe2\xf9K~\x84\\\x90\x1f1\xc4\x0d" +
	"\x9aOg\xc3\x97\x8eW\xdf\xf4\xc7\xf0n\x90\x97\xf5x" +
	"\x90\xc5@\x94\xbb\xf7\x0e\xddY~\xdb\x7f\x84\xa4\xb41" +
	"\x83\xb0\xc2\x10\xdaO7|\x13\x9a\xff\xceO@\xab\xd1" +
	"\xfe\xea\xc6\x9c\x0f\xdbWm\xba\xe7 \xa9M\xcaE\xf5" +
	"q\x85\xfd\x9a\xa70\xb0\xdbuK\xbe?V\xb7\xfe\x8e" +
	"\xaf\xddF\x94\x19\xac\xdd<\xc7\x92n\x12\x98\xf3\xa0\xb2" +
	"M\x1dR\xa6\x03\xa8\xc3\xca\x8f\x80\xf6\x81\xaa)K\x1e" +
	"\x9b{\xf1w\x7fL}\xa1v\x16S.\xc4b:\xa2" +
	"-\xb8v\xa1\xc1\xba\x9fO\x9bgu 4\x85\x97>" +
	"\xc4\x029\xf9\xc9\xc9\x1b\x7f(W\xc6\x1e\xe8\x85\xb1\xd0" +
	"\x09U\xaa`\xf6X\xb1\x14\xd5\xeb\x1524\xda\xeb3" +
	"]\xcd\xddz\x7fZ\xe8\x8f>\x97\xc9\xf6\xbe\x92\xca\x0c" +
	"4\xaf5,-g\xe4\x0c3\x92\xd0\xb3\xb2\xdeg\xfa" +
	"\xad\x9e\xca\xa4\xd3F\xb7\x95\xcc\xa4\x99\xdd\xd3\x1b\x8d\xb4" +
	"\x15I\xe8UY\xbd\xcf\xd4DA\x04\x10\x11\x80\x86\xdb" +
	"\x01\xb4\xa0\x80Z\x0d\xc1-\x063\x8a/\xc60\x10\x0c" +
	"\x03\x8e\x83\xd6\x9f\xcb\xa3u\x1a\xb5f.e\x99ec" +
	"\xebv\x1c\"\x9d\x86\x99K\x09V\xd1\x99\xab\x01\xb4J" +
	"\x01\xb5\x7f\x13\xb4\xf3vI\x102i\xa4\x85\xa2\x00\"" +
	"\xf5\x85\x80\xfdQ\x9e*$\x10\xb5\xa0\x07\xd5\xd0\x01\xa0" +
	"\xcd\x12P\x9bK\x10\xb1\x86\x0d\x1dm\xed\x04\xd0Z\x04" +
	"\xd4\x9e h\x0fd\xb2\xbdF6\xde\x03\x00^Z\x1b" +
	"\x18\xd0\xb3\xc9M\x80\x06*@P\xf1\x9d#\x16\x97\x97" +
	"'\xba(\x95Zed\xcdd&mF\x12\xb5\xfa\xa3" +
	"T\xb0\x04v\xb9n\x19\xa6\x03\x1e_\xcc\xc8\xd3\x85b" +
	"\xcch\x013\xc6\x9c\xca\x93R\xa6\x11:\x0d\xb3\x8aq" +
	"R\x0e,B0\xc6s7\xf1_\x80\x09\x01\xb1\xba\xa0" +
	"\xa0\x80\xec\xe18\x94\xeb\xdd\xbd\x1d\x99.\xce\xa5\\\x02" +
	"\xdeV\x88\xb4V\xef\xee5z\x10\x81 \x16S\xe7\x04" +
	"*d\x06\x18{5\x82\x84\xa27\x1e\xe8\x8a<\x1di" +
	"\x07Bw0\xdds\x95\x1a]\x01\xa4\x83G\x81\xd0\x9c" +
	"\x8c\x055AW\x98h\xb2\x03\x08\xd5e$\xde\x12B" +
	"W\xa8\xe9\xcaN t\x85\x8c\x82'\xee\xe8J\"]" +
	"\xb4\x0b\x08] o\xc9w\xe0B\xb4]\xc2\xd1e\\" +
	"\xce\xa4M\xe7\xb9\xd3|\x00\xfe\x7f\x98\x7f\xc7\xd9D\x97" +
	"Nf\x93\xc0\xbf\xdfQ\x9d1\xc3\x9c\x881\xdeR>" +
	"\xc6<\x95\x9a\x90\xb1\xb5\x86U\xc4\x98odX\xbfF" +
	"\x04\xd4Z\x08Rwf\x9a\xda\x0asT\xda\xc4\x8c\xd6" +
	"\x87m\xe9r\x9d\xf2\xf0J\x93o;w>|9\xb4" +
	"M\x92C-?\xa0\xa4Z\xd5\xe3\xe6Rn\x96&\xed" +
	"v>J%#T]\\\xa0b\xd5|\xc6\x18p\x85" +
	"\x933\x0e\xf0\x08\xe5y0\xce2\xf2\xd1\xe1\x13\xd8\xbc" +
	"\x02.\xf6+\xe0$\xc2\xee\xae\x89\x7f\xd24\xe3\x100" +
	"\xd9\x86rw\xcaxE\x9f\x0c\x96\xf4G9P\xf3\x0a" +
	"\xc3\xd2{tK\x87\xd2\x8dQ?I&r\xaf1\x88" +
	"\x95@\xb0\x12\xb0v\xa3\x9e\xca\x19\xee\xbf\x89G-O" +
	"\x83_\xf6x$\xa0\x89\xe8\xbf\xa1`\x87]\x88\x0d\xb4" +
	"j/2\x9dM\xfd\x8b\x02j\xeb\x0a\xbb\xcc`u\x7f" +
	"Y@-E\x90\x12\xacA\x02@\x93\xb3\x01\xb4\x1e\x01" +
	"\xb5\xd7\x09R\x81\xd4\xa0\x00@\x87\x98\xf7\xab\x02j\xdb" +
	"\xd9\xcaH\xa6,#\xeb*1S8\x8b\x95-\xcfM" +
	"U\x9fa\xe9\x05A\xf1Bs\x04%\xe64L\xb9y" +
	"\x1f\xa7\x9d\x13|%\xc2\xa3RV\xee\xd6\xc0!\xb1\xa8" +
	"\x03\xa3\xe5xc\x8d\xde(\xa06\xff\xc1=9Q\xdf" +
	"\xa3\x9bK\x15K&\xbf\x94\x00\xbc\x9b(\xba\xdf$t" +
	"\x84-\x97a\xb6x\xdc\x0b\x1f\xba\x17^:\xd4\xe5," +
	"%\xe2}\xe3\xa0{S\xf5\x96\x92\xe0\xdd7\xd1\xbd\xac" +
	"\xd3\x95Q 4.\xa3\xe8\xdd\xbe\xd1\xfdp\xa0\x0b\xd8" +
	"\xbbV\xd9vg\xd1Y9n\xb5A6\xd2\xfeE\xc5" +
	"\xdf\xc6\x9c\x06\\\x881G/\xf9\xfa\xf9+\x00\x00\xff" +
	"\xff\xa8<\x8do"

func init() {
	schemas.Register(schema_d598217bc368711c,
		0x814b25c6a90ab3fd,
		0x858fba217e5b6d0a,
		0x88498a4904c5c24b,
		0x8bcafe9abfa2fdc5,
		0x8be40c5e90cff4cf,
		0x8c160cee2c28c32f,
		0x8dde89bb27860684,
		0x90eb69d2aa988bfb,
		0x9824c247770da692,
		0xa35d193330adceaf,
		0xa6863ad17f79d808,
		0xafa27e7eec8d315d,
		0xb222156f3117892c,
		0xbc929b168c2d35bc,
		0xc6682ec0740925e5,
		0xc9cfdb3e090d737d,
		0xcc590b8e644c6381,
		0xde10a9cc0d72b72e,
		0xe84cea99f5f10902,
		0xe9a0380ad629b742,
		0xea6a21a6e04621e8,
		0xf57a5642b033d8c1,
		0xf6ca343646120f95,
		0xfb7429c9d23d519b,
		0xfdce09f9d8aeb8ae)
}
