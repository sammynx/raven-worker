// Code generated by capnpc-go. DO NOT EDIT.

package workflow

import (
	context "golang.org/x/net/context"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
	server "zombiezen.com/go/capnproto2/server"
)

type Event struct{ capnp.Struct }

// Event_TypeID is the unique identifier for the type Event.
const Event_TypeID = 0xf57a5642b033d8c1

func NewEvent(s *capnp.Segment) (Event, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return Event{st}, err
}

func NewRootEvent(s *capnp.Segment) (Event, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return Event{st}, err
}

func ReadRootEvent(msg *capnp.Message) (Event, error) {
	root, err := msg.RootPtr()
	return Event{root.Struct()}, err
}

func (s Event) String() string {
	str, _ := text.Marshal(0xf57a5642b033d8c1, s.Struct)
	return str
}

func (s Event) Filter() bool {
	return s.Struct.Bit(0)
}

func (s Event) SetFilter(v bool) {
	s.Struct.SetBit(0, v)
}

func (s Event) Content() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Event) HasContent() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Event) SetContent(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s Event) Meta() (Event_Metadata_List, error) {
	p, err := s.Struct.Ptr(1)
	return Event_Metadata_List{List: p.List()}, err
}

func (s Event) HasMeta() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Event) SetMeta(v Event_Metadata_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewMeta sets the meta field to a newly
// allocated Event_Metadata_List, preferring placement in s's segment.
func (s Event) NewMeta(n int32) (Event_Metadata_List, error) {
	l, err := NewEvent_Metadata_List(s.Struct.Segment(), n)
	if err != nil {
		return Event_Metadata_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s Event) Worker() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return []byte(p.Data()), err
}

func (s Event) HasWorker() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Event) SetWorker(v []byte) error {
	return s.Struct.SetData(2, v)
}

// Event_List is a list of Event.
type Event_List struct{ capnp.List }

// NewEvent creates a new list of Event.
func NewEvent_List(s *capnp.Segment, sz int32) (Event_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return Event_List{l}, err
}

func (s Event_List) At(i int) Event { return Event{s.List.Struct(i)} }

func (s Event_List) Set(i int, v Event) error { return s.List.SetStruct(i, v.Struct) }

func (s Event_List) String() string {
	str, _ := text.MarshalList(0xf57a5642b033d8c1, s.List)
	return str
}

// Event_Promise is a wrapper for a Event promised by a client call.
type Event_Promise struct{ *capnp.Pipeline }

func (p Event_Promise) Struct() (Event, error) {
	s, err := p.Pipeline.Struct()
	return Event{s}, err
}

type Event_Metadata struct{ capnp.Struct }

// Event_Metadata_TypeID is the unique identifier for the type Event_Metadata.
const Event_Metadata_TypeID = 0xe9a0380ad629b742

func NewEvent_Metadata(s *capnp.Segment) (Event_Metadata, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Event_Metadata{st}, err
}

func NewRootEvent_Metadata(s *capnp.Segment) (Event_Metadata, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Event_Metadata{st}, err
}

func ReadRootEvent_Metadata(msg *capnp.Message) (Event_Metadata, error) {
	root, err := msg.RootPtr()
	return Event_Metadata{root.Struct()}, err
}

func (s Event_Metadata) String() string {
	str, _ := text.Marshal(0xe9a0380ad629b742, s.Struct)
	return str
}

func (s Event_Metadata) Key() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Event_Metadata) HasKey() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Event_Metadata) KeyBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Event_Metadata) SetKey(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Event_Metadata) Value() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s Event_Metadata) HasValue() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Event_Metadata) ValueBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s Event_Metadata) SetValue(v string) error {
	return s.Struct.SetText(1, v)
}

// Event_Metadata_List is a list of Event_Metadata.
type Event_Metadata_List struct{ capnp.List }

// NewEvent_Metadata creates a new list of Event_Metadata.
func NewEvent_Metadata_List(s *capnp.Segment, sz int32) (Event_Metadata_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Event_Metadata_List{l}, err
}

func (s Event_Metadata_List) At(i int) Event_Metadata { return Event_Metadata{s.List.Struct(i)} }

func (s Event_Metadata_List) Set(i int, v Event_Metadata) error { return s.List.SetStruct(i, v.Struct) }

func (s Event_Metadata_List) String() string {
	str, _ := text.MarshalList(0xe9a0380ad629b742, s.List)
	return str
}

// Event_Metadata_Promise is a wrapper for a Event_Metadata promised by a client call.
type Event_Metadata_Promise struct{ *capnp.Pipeline }

func (p Event_Metadata_Promise) Struct() (Event_Metadata, error) {
	s, err := p.Pipeline.Struct()
	return Event_Metadata{s}, err
}

type Workflow struct{ Client capnp.Client }

// Workflow_TypeID is the unique identifier for the type Workflow.
const Workflow_TypeID = 0xa35d193330adceaf

func (c Workflow) PutEvent(ctx context.Context, params func(Workflow_putEvent_Params) error, opts ...capnp.CallOption) Workflow_putEvent_Results_Promise {
	if c.Client == nil {
		return Workflow_putEvent_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xa35d193330adceaf,
			MethodID:      0,
			InterfaceName: "job.capnp:Workflow",
			MethodName:    "putEvent",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 4}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Workflow_putEvent_Params{Struct: s}) }
	}
	return Workflow_putEvent_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Workflow) PutNewEvent(ctx context.Context, params func(Workflow_putNewEvent_Params) error, opts ...capnp.CallOption) Workflow_putNewEvent_Results_Promise {
	if c.Client == nil {
		return Workflow_putNewEvent_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xa35d193330adceaf,
			MethodID:      1,
			InterfaceName: "job.capnp:Workflow",
			MethodName:    "putNewEvent",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Workflow_putNewEvent_Params{Struct: s}) }
	}
	return Workflow_putNewEvent_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Workflow) GetEvent(ctx context.Context, params func(Workflow_getEvent_Params) error, opts ...capnp.CallOption) Workflow_getEvent_Results_Promise {
	if c.Client == nil {
		return Workflow_getEvent_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xa35d193330adceaf,
			MethodID:      2,
			InterfaceName: "job.capnp:Workflow",
			MethodName:    "getEvent",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Workflow_getEvent_Params{Struct: s}) }
	}
	return Workflow_getEvent_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Workflow) GetEventAllVersions(ctx context.Context, params func(Workflow_getEventAllVersions_Params) error, opts ...capnp.CallOption) Workflow_getEventAllVersions_Results_Promise {
	if c.Client == nil {
		return Workflow_getEventAllVersions_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xa35d193330adceaf,
			MethodID:      3,
			InterfaceName: "job.capnp:Workflow",
			MethodName:    "getEventAllVersions",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Workflow_getEventAllVersions_Params{Struct: s}) }
	}
	return Workflow_getEventAllVersions_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Workflow) GetLatestEventID(ctx context.Context, params func(Workflow_getLatestEventID_Params) error, opts ...capnp.CallOption) Workflow_getLatestEventID_Results_Promise {
	if c.Client == nil {
		return Workflow_getLatestEventID_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xa35d193330adceaf,
			MethodID:      4,
			InterfaceName: "job.capnp:Workflow",
			MethodName:    "getLatestEventID",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Workflow_getLatestEventID_Params{Struct: s}) }
	}
	return Workflow_getLatestEventID_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Workflow) GetJob(ctx context.Context, params func(Workflow_getJob_Params) error, opts ...capnp.CallOption) Workflow_getJob_Results_Promise {
	if c.Client == nil {
		return Workflow_getJob_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xa35d193330adceaf,
			MethodID:      5,
			InterfaceName: "job.capnp:Workflow",
			MethodName:    "getJob",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Workflow_getJob_Params{Struct: s}) }
	}
	return Workflow_getJob_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Workflow) AckJob(ctx context.Context, params func(Workflow_ackJob_Params) error, opts ...capnp.CallOption) Workflow_ackJob_Results_Promise {
	if c.Client == nil {
		return Workflow_ackJob_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xa35d193330adceaf,
			MethodID:      6,
			InterfaceName: "job.capnp:Workflow",
			MethodName:    "ackJob",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Workflow_ackJob_Params{Struct: s}) }
	}
	return Workflow_ackJob_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}

type Workflow_Server interface {
	PutEvent(Workflow_putEvent) error

	PutNewEvent(Workflow_putNewEvent) error

	GetEvent(Workflow_getEvent) error

	GetEventAllVersions(Workflow_getEventAllVersions) error

	GetLatestEventID(Workflow_getLatestEventID) error

	GetJob(Workflow_getJob) error

	AckJob(Workflow_ackJob) error
}

func Workflow_ServerToClient(s Workflow_Server) Workflow {
	c, _ := s.(server.Closer)
	return Workflow{Client: server.New(Workflow_Methods(nil, s), c)}
}

func Workflow_Methods(methods []server.Method, s Workflow_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 7)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa35d193330adceaf,
			MethodID:      0,
			InterfaceName: "job.capnp:Workflow",
			MethodName:    "putEvent",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Workflow_putEvent{c, opts, Workflow_putEvent_Params{Struct: p}, Workflow_putEvent_Results{Struct: r}}
			return s.PutEvent(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa35d193330adceaf,
			MethodID:      1,
			InterfaceName: "job.capnp:Workflow",
			MethodName:    "putNewEvent",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Workflow_putNewEvent{c, opts, Workflow_putNewEvent_Params{Struct: p}, Workflow_putNewEvent_Results{Struct: r}}
			return s.PutNewEvent(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa35d193330adceaf,
			MethodID:      2,
			InterfaceName: "job.capnp:Workflow",
			MethodName:    "getEvent",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Workflow_getEvent{c, opts, Workflow_getEvent_Params{Struct: p}, Workflow_getEvent_Results{Struct: r}}
			return s.GetEvent(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa35d193330adceaf,
			MethodID:      3,
			InterfaceName: "job.capnp:Workflow",
			MethodName:    "getEventAllVersions",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Workflow_getEventAllVersions{c, opts, Workflow_getEventAllVersions_Params{Struct: p}, Workflow_getEventAllVersions_Results{Struct: r}}
			return s.GetEventAllVersions(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa35d193330adceaf,
			MethodID:      4,
			InterfaceName: "job.capnp:Workflow",
			MethodName:    "getLatestEventID",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Workflow_getLatestEventID{c, opts, Workflow_getLatestEventID_Params{Struct: p}, Workflow_getLatestEventID_Results{Struct: r}}
			return s.GetLatestEventID(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa35d193330adceaf,
			MethodID:      5,
			InterfaceName: "job.capnp:Workflow",
			MethodName:    "getJob",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Workflow_getJob{c, opts, Workflow_getJob_Params{Struct: p}, Workflow_getJob_Results{Struct: r}}
			return s.GetJob(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 3},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa35d193330adceaf,
			MethodID:      6,
			InterfaceName: "job.capnp:Workflow",
			MethodName:    "ackJob",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Workflow_ackJob{c, opts, Workflow_ackJob_Params{Struct: p}, Workflow_ackJob_Results{Struct: r}}
			return s.AckJob(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 8, PointerCount: 0},
	})

	return methods
}

// Workflow_putEvent holds the arguments for a server call to Workflow.putEvent.
type Workflow_putEvent struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Workflow_putEvent_Params
	Results Workflow_putEvent_Results
}

// Workflow_putNewEvent holds the arguments for a server call to Workflow.putNewEvent.
type Workflow_putNewEvent struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Workflow_putNewEvent_Params
	Results Workflow_putNewEvent_Results
}

// Workflow_getEvent holds the arguments for a server call to Workflow.getEvent.
type Workflow_getEvent struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Workflow_getEvent_Params
	Results Workflow_getEvent_Results
}

// Workflow_getEventAllVersions holds the arguments for a server call to Workflow.getEventAllVersions.
type Workflow_getEventAllVersions struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Workflow_getEventAllVersions_Params
	Results Workflow_getEventAllVersions_Results
}

// Workflow_getLatestEventID holds the arguments for a server call to Workflow.getLatestEventID.
type Workflow_getLatestEventID struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Workflow_getLatestEventID_Params
	Results Workflow_getLatestEventID_Results
}

// Workflow_getJob holds the arguments for a server call to Workflow.getJob.
type Workflow_getJob struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Workflow_getJob_Params
	Results Workflow_getJob_Results
}

// Workflow_ackJob holds the arguments for a server call to Workflow.ackJob.
type Workflow_ackJob struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Workflow_ackJob_Params
	Results Workflow_ackJob_Results
}

type Workflow_putEvent_Params struct{ capnp.Struct }

// Workflow_putEvent_Params_TypeID is the unique identifier for the type Workflow_putEvent_Params.
const Workflow_putEvent_Params_TypeID = 0xfb7429c9d23d519b

func NewWorkflow_putEvent_Params(s *capnp.Segment) (Workflow_putEvent_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return Workflow_putEvent_Params{st}, err
}

func NewRootWorkflow_putEvent_Params(s *capnp.Segment) (Workflow_putEvent_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return Workflow_putEvent_Params{st}, err
}

func ReadRootWorkflow_putEvent_Params(msg *capnp.Message) (Workflow_putEvent_Params, error) {
	root, err := msg.RootPtr()
	return Workflow_putEvent_Params{root.Struct()}, err
}

func (s Workflow_putEvent_Params) String() string {
	str, _ := text.Marshal(0xfb7429c9d23d519b, s.Struct)
	return str
}

func (s Workflow_putEvent_Params) FlowID() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Workflow_putEvent_Params) HasFlowID() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Workflow_putEvent_Params) SetFlowID(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s Workflow_putEvent_Params) WorkerID() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s Workflow_putEvent_Params) HasWorkerID() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Workflow_putEvent_Params) SetWorkerID(v []byte) error {
	return s.Struct.SetData(1, v)
}

func (s Workflow_putEvent_Params) EventID() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return []byte(p.Data()), err
}

func (s Workflow_putEvent_Params) HasEventID() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Workflow_putEvent_Params) SetEventID(v []byte) error {
	return s.Struct.SetData(2, v)
}

func (s Workflow_putEvent_Params) Event() (Event, error) {
	p, err := s.Struct.Ptr(3)
	return Event{Struct: p.Struct()}, err
}

func (s Workflow_putEvent_Params) HasEvent() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s Workflow_putEvent_Params) SetEvent(v Event) error {
	return s.Struct.SetPtr(3, v.Struct.ToPtr())
}

// NewEvent sets the event field to a newly
// allocated Event struct, preferring placement in s's segment.
func (s Workflow_putEvent_Params) NewEvent() (Event, error) {
	ss, err := NewEvent(s.Struct.Segment())
	if err != nil {
		return Event{}, err
	}
	err = s.Struct.SetPtr(3, ss.Struct.ToPtr())
	return ss, err
}

// Workflow_putEvent_Params_List is a list of Workflow_putEvent_Params.
type Workflow_putEvent_Params_List struct{ capnp.List }

// NewWorkflow_putEvent_Params creates a new list of Workflow_putEvent_Params.
func NewWorkflow_putEvent_Params_List(s *capnp.Segment, sz int32) (Workflow_putEvent_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return Workflow_putEvent_Params_List{l}, err
}

func (s Workflow_putEvent_Params_List) At(i int) Workflow_putEvent_Params {
	return Workflow_putEvent_Params{s.List.Struct(i)}
}

func (s Workflow_putEvent_Params_List) Set(i int, v Workflow_putEvent_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Workflow_putEvent_Params_List) String() string {
	str, _ := text.MarshalList(0xfb7429c9d23d519b, s.List)
	return str
}

// Workflow_putEvent_Params_Promise is a wrapper for a Workflow_putEvent_Params promised by a client call.
type Workflow_putEvent_Params_Promise struct{ *capnp.Pipeline }

func (p Workflow_putEvent_Params_Promise) Struct() (Workflow_putEvent_Params, error) {
	s, err := p.Pipeline.Struct()
	return Workflow_putEvent_Params{s}, err
}

func (p Workflow_putEvent_Params_Promise) Event() Event_Promise {
	return Event_Promise{Pipeline: p.Pipeline.GetPipeline(3)}
}

type Workflow_putEvent_Results struct{ capnp.Struct }

// Workflow_putEvent_Results_TypeID is the unique identifier for the type Workflow_putEvent_Results.
const Workflow_putEvent_Results_TypeID = 0x8bcafe9abfa2fdc5

func NewWorkflow_putEvent_Results(s *capnp.Segment) (Workflow_putEvent_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Workflow_putEvent_Results{st}, err
}

func NewRootWorkflow_putEvent_Results(s *capnp.Segment) (Workflow_putEvent_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Workflow_putEvent_Results{st}, err
}

func ReadRootWorkflow_putEvent_Results(msg *capnp.Message) (Workflow_putEvent_Results, error) {
	root, err := msg.RootPtr()
	return Workflow_putEvent_Results{root.Struct()}, err
}

func (s Workflow_putEvent_Results) String() string {
	str, _ := text.Marshal(0x8bcafe9abfa2fdc5, s.Struct)
	return str
}

// Workflow_putEvent_Results_List is a list of Workflow_putEvent_Results.
type Workflow_putEvent_Results_List struct{ capnp.List }

// NewWorkflow_putEvent_Results creates a new list of Workflow_putEvent_Results.
func NewWorkflow_putEvent_Results_List(s *capnp.Segment, sz int32) (Workflow_putEvent_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Workflow_putEvent_Results_List{l}, err
}

func (s Workflow_putEvent_Results_List) At(i int) Workflow_putEvent_Results {
	return Workflow_putEvent_Results{s.List.Struct(i)}
}

func (s Workflow_putEvent_Results_List) Set(i int, v Workflow_putEvent_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Workflow_putEvent_Results_List) String() string {
	str, _ := text.MarshalList(0x8bcafe9abfa2fdc5, s.List)
	return str
}

// Workflow_putEvent_Results_Promise is a wrapper for a Workflow_putEvent_Results promised by a client call.
type Workflow_putEvent_Results_Promise struct{ *capnp.Pipeline }

func (p Workflow_putEvent_Results_Promise) Struct() (Workflow_putEvent_Results, error) {
	s, err := p.Pipeline.Struct()
	return Workflow_putEvent_Results{s}, err
}

type Workflow_putNewEvent_Params struct{ capnp.Struct }

// Workflow_putNewEvent_Params_TypeID is the unique identifier for the type Workflow_putNewEvent_Params.
const Workflow_putNewEvent_Params_TypeID = 0x8c160cee2c28c32f

func NewWorkflow_putNewEvent_Params(s *capnp.Segment) (Workflow_putNewEvent_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Workflow_putNewEvent_Params{st}, err
}

func NewRootWorkflow_putNewEvent_Params(s *capnp.Segment) (Workflow_putNewEvent_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Workflow_putNewEvent_Params{st}, err
}

func ReadRootWorkflow_putNewEvent_Params(msg *capnp.Message) (Workflow_putNewEvent_Params, error) {
	root, err := msg.RootPtr()
	return Workflow_putNewEvent_Params{root.Struct()}, err
}

func (s Workflow_putNewEvent_Params) String() string {
	str, _ := text.Marshal(0x8c160cee2c28c32f, s.Struct)
	return str
}

func (s Workflow_putNewEvent_Params) FlowID() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Workflow_putNewEvent_Params) HasFlowID() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Workflow_putNewEvent_Params) SetFlowID(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s Workflow_putNewEvent_Params) WorkerID() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s Workflow_putNewEvent_Params) HasWorkerID() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Workflow_putNewEvent_Params) SetWorkerID(v []byte) error {
	return s.Struct.SetData(1, v)
}

func (s Workflow_putNewEvent_Params) Event() (Event, error) {
	p, err := s.Struct.Ptr(2)
	return Event{Struct: p.Struct()}, err
}

func (s Workflow_putNewEvent_Params) HasEvent() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Workflow_putNewEvent_Params) SetEvent(v Event) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewEvent sets the event field to a newly
// allocated Event struct, preferring placement in s's segment.
func (s Workflow_putNewEvent_Params) NewEvent() (Event, error) {
	ss, err := NewEvent(s.Struct.Segment())
	if err != nil {
		return Event{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

// Workflow_putNewEvent_Params_List is a list of Workflow_putNewEvent_Params.
type Workflow_putNewEvent_Params_List struct{ capnp.List }

// NewWorkflow_putNewEvent_Params creates a new list of Workflow_putNewEvent_Params.
func NewWorkflow_putNewEvent_Params_List(s *capnp.Segment, sz int32) (Workflow_putNewEvent_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return Workflow_putNewEvent_Params_List{l}, err
}

func (s Workflow_putNewEvent_Params_List) At(i int) Workflow_putNewEvent_Params {
	return Workflow_putNewEvent_Params{s.List.Struct(i)}
}

func (s Workflow_putNewEvent_Params_List) Set(i int, v Workflow_putNewEvent_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Workflow_putNewEvent_Params_List) String() string {
	str, _ := text.MarshalList(0x8c160cee2c28c32f, s.List)
	return str
}

// Workflow_putNewEvent_Params_Promise is a wrapper for a Workflow_putNewEvent_Params promised by a client call.
type Workflow_putNewEvent_Params_Promise struct{ *capnp.Pipeline }

func (p Workflow_putNewEvent_Params_Promise) Struct() (Workflow_putNewEvent_Params, error) {
	s, err := p.Pipeline.Struct()
	return Workflow_putNewEvent_Params{s}, err
}

func (p Workflow_putNewEvent_Params_Promise) Event() Event_Promise {
	return Event_Promise{Pipeline: p.Pipeline.GetPipeline(2)}
}

type Workflow_putNewEvent_Results struct{ capnp.Struct }

// Workflow_putNewEvent_Results_TypeID is the unique identifier for the type Workflow_putNewEvent_Results.
const Workflow_putNewEvent_Results_TypeID = 0xa6863ad17f79d808

func NewWorkflow_putNewEvent_Results(s *capnp.Segment) (Workflow_putNewEvent_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Workflow_putNewEvent_Results{st}, err
}

func NewRootWorkflow_putNewEvent_Results(s *capnp.Segment) (Workflow_putNewEvent_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Workflow_putNewEvent_Results{st}, err
}

func ReadRootWorkflow_putNewEvent_Results(msg *capnp.Message) (Workflow_putNewEvent_Results, error) {
	root, err := msg.RootPtr()
	return Workflow_putNewEvent_Results{root.Struct()}, err
}

func (s Workflow_putNewEvent_Results) String() string {
	str, _ := text.Marshal(0xa6863ad17f79d808, s.Struct)
	return str
}

func (s Workflow_putNewEvent_Results) EventID() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Workflow_putNewEvent_Results) HasEventID() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Workflow_putNewEvent_Results) SetEventID(v []byte) error {
	return s.Struct.SetData(0, v)
}

// Workflow_putNewEvent_Results_List is a list of Workflow_putNewEvent_Results.
type Workflow_putNewEvent_Results_List struct{ capnp.List }

// NewWorkflow_putNewEvent_Results creates a new list of Workflow_putNewEvent_Results.
func NewWorkflow_putNewEvent_Results_List(s *capnp.Segment, sz int32) (Workflow_putNewEvent_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Workflow_putNewEvent_Results_List{l}, err
}

func (s Workflow_putNewEvent_Results_List) At(i int) Workflow_putNewEvent_Results {
	return Workflow_putNewEvent_Results{s.List.Struct(i)}
}

func (s Workflow_putNewEvent_Results_List) Set(i int, v Workflow_putNewEvent_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Workflow_putNewEvent_Results_List) String() string {
	str, _ := text.MarshalList(0xa6863ad17f79d808, s.List)
	return str
}

// Workflow_putNewEvent_Results_Promise is a wrapper for a Workflow_putNewEvent_Results promised by a client call.
type Workflow_putNewEvent_Results_Promise struct{ *capnp.Pipeline }

func (p Workflow_putNewEvent_Results_Promise) Struct() (Workflow_putNewEvent_Results, error) {
	s, err := p.Pipeline.Struct()
	return Workflow_putNewEvent_Results{s}, err
}

type Workflow_getEvent_Params struct{ capnp.Struct }

// Workflow_getEvent_Params_TypeID is the unique identifier for the type Workflow_getEvent_Params.
const Workflow_getEvent_Params_TypeID = 0xcc590b8e644c6381

func NewWorkflow_getEvent_Params(s *capnp.Segment) (Workflow_getEvent_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Workflow_getEvent_Params{st}, err
}

func NewRootWorkflow_getEvent_Params(s *capnp.Segment) (Workflow_getEvent_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Workflow_getEvent_Params{st}, err
}

func ReadRootWorkflow_getEvent_Params(msg *capnp.Message) (Workflow_getEvent_Params, error) {
	root, err := msg.RootPtr()
	return Workflow_getEvent_Params{root.Struct()}, err
}

func (s Workflow_getEvent_Params) String() string {
	str, _ := text.Marshal(0xcc590b8e644c6381, s.Struct)
	return str
}

func (s Workflow_getEvent_Params) EventID() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Workflow_getEvent_Params) HasEventID() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Workflow_getEvent_Params) SetEventID(v []byte) error {
	return s.Struct.SetData(0, v)
}

// Workflow_getEvent_Params_List is a list of Workflow_getEvent_Params.
type Workflow_getEvent_Params_List struct{ capnp.List }

// NewWorkflow_getEvent_Params creates a new list of Workflow_getEvent_Params.
func NewWorkflow_getEvent_Params_List(s *capnp.Segment, sz int32) (Workflow_getEvent_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Workflow_getEvent_Params_List{l}, err
}

func (s Workflow_getEvent_Params_List) At(i int) Workflow_getEvent_Params {
	return Workflow_getEvent_Params{s.List.Struct(i)}
}

func (s Workflow_getEvent_Params_List) Set(i int, v Workflow_getEvent_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Workflow_getEvent_Params_List) String() string {
	str, _ := text.MarshalList(0xcc590b8e644c6381, s.List)
	return str
}

// Workflow_getEvent_Params_Promise is a wrapper for a Workflow_getEvent_Params promised by a client call.
type Workflow_getEvent_Params_Promise struct{ *capnp.Pipeline }

func (p Workflow_getEvent_Params_Promise) Struct() (Workflow_getEvent_Params, error) {
	s, err := p.Pipeline.Struct()
	return Workflow_getEvent_Params{s}, err
}

type Workflow_getEvent_Results struct{ capnp.Struct }

// Workflow_getEvent_Results_TypeID is the unique identifier for the type Workflow_getEvent_Results.
const Workflow_getEvent_Results_TypeID = 0xc6682ec0740925e5

func NewWorkflow_getEvent_Results(s *capnp.Segment) (Workflow_getEvent_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Workflow_getEvent_Results{st}, err
}

func NewRootWorkflow_getEvent_Results(s *capnp.Segment) (Workflow_getEvent_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Workflow_getEvent_Results{st}, err
}

func ReadRootWorkflow_getEvent_Results(msg *capnp.Message) (Workflow_getEvent_Results, error) {
	root, err := msg.RootPtr()
	return Workflow_getEvent_Results{root.Struct()}, err
}

func (s Workflow_getEvent_Results) String() string {
	str, _ := text.Marshal(0xc6682ec0740925e5, s.Struct)
	return str
}

func (s Workflow_getEvent_Results) Event() (Event, error) {
	p, err := s.Struct.Ptr(0)
	return Event{Struct: p.Struct()}, err
}

func (s Workflow_getEvent_Results) HasEvent() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Workflow_getEvent_Results) SetEvent(v Event) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewEvent sets the event field to a newly
// allocated Event struct, preferring placement in s's segment.
func (s Workflow_getEvent_Results) NewEvent() (Event, error) {
	ss, err := NewEvent(s.Struct.Segment())
	if err != nil {
		return Event{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Workflow_getEvent_Results_List is a list of Workflow_getEvent_Results.
type Workflow_getEvent_Results_List struct{ capnp.List }

// NewWorkflow_getEvent_Results creates a new list of Workflow_getEvent_Results.
func NewWorkflow_getEvent_Results_List(s *capnp.Segment, sz int32) (Workflow_getEvent_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Workflow_getEvent_Results_List{l}, err
}

func (s Workflow_getEvent_Results_List) At(i int) Workflow_getEvent_Results {
	return Workflow_getEvent_Results{s.List.Struct(i)}
}

func (s Workflow_getEvent_Results_List) Set(i int, v Workflow_getEvent_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Workflow_getEvent_Results_List) String() string {
	str, _ := text.MarshalList(0xc6682ec0740925e5, s.List)
	return str
}

// Workflow_getEvent_Results_Promise is a wrapper for a Workflow_getEvent_Results promised by a client call.
type Workflow_getEvent_Results_Promise struct{ *capnp.Pipeline }

func (p Workflow_getEvent_Results_Promise) Struct() (Workflow_getEvent_Results, error) {
	s, err := p.Pipeline.Struct()
	return Workflow_getEvent_Results{s}, err
}

func (p Workflow_getEvent_Results_Promise) Event() Event_Promise {
	return Event_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type Workflow_getEventAllVersions_Params struct{ capnp.Struct }

// Workflow_getEventAllVersions_Params_TypeID is the unique identifier for the type Workflow_getEventAllVersions_Params.
const Workflow_getEventAllVersions_Params_TypeID = 0x814b25c6a90ab3fd

func NewWorkflow_getEventAllVersions_Params(s *capnp.Segment) (Workflow_getEventAllVersions_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Workflow_getEventAllVersions_Params{st}, err
}

func NewRootWorkflow_getEventAllVersions_Params(s *capnp.Segment) (Workflow_getEventAllVersions_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Workflow_getEventAllVersions_Params{st}, err
}

func ReadRootWorkflow_getEventAllVersions_Params(msg *capnp.Message) (Workflow_getEventAllVersions_Params, error) {
	root, err := msg.RootPtr()
	return Workflow_getEventAllVersions_Params{root.Struct()}, err
}

func (s Workflow_getEventAllVersions_Params) String() string {
	str, _ := text.Marshal(0x814b25c6a90ab3fd, s.Struct)
	return str
}

func (s Workflow_getEventAllVersions_Params) EventID() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Workflow_getEventAllVersions_Params) HasEventID() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Workflow_getEventAllVersions_Params) SetEventID(v []byte) error {
	return s.Struct.SetData(0, v)
}

// Workflow_getEventAllVersions_Params_List is a list of Workflow_getEventAllVersions_Params.
type Workflow_getEventAllVersions_Params_List struct{ capnp.List }

// NewWorkflow_getEventAllVersions_Params creates a new list of Workflow_getEventAllVersions_Params.
func NewWorkflow_getEventAllVersions_Params_List(s *capnp.Segment, sz int32) (Workflow_getEventAllVersions_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Workflow_getEventAllVersions_Params_List{l}, err
}

func (s Workflow_getEventAllVersions_Params_List) At(i int) Workflow_getEventAllVersions_Params {
	return Workflow_getEventAllVersions_Params{s.List.Struct(i)}
}

func (s Workflow_getEventAllVersions_Params_List) Set(i int, v Workflow_getEventAllVersions_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Workflow_getEventAllVersions_Params_List) String() string {
	str, _ := text.MarshalList(0x814b25c6a90ab3fd, s.List)
	return str
}

// Workflow_getEventAllVersions_Params_Promise is a wrapper for a Workflow_getEventAllVersions_Params promised by a client call.
type Workflow_getEventAllVersions_Params_Promise struct{ *capnp.Pipeline }

func (p Workflow_getEventAllVersions_Params_Promise) Struct() (Workflow_getEventAllVersions_Params, error) {
	s, err := p.Pipeline.Struct()
	return Workflow_getEventAllVersions_Params{s}, err
}

type Workflow_getEventAllVersions_Results struct{ capnp.Struct }

// Workflow_getEventAllVersions_Results_TypeID is the unique identifier for the type Workflow_getEventAllVersions_Results.
const Workflow_getEventAllVersions_Results_TypeID = 0x90eb69d2aa988bfb

func NewWorkflow_getEventAllVersions_Results(s *capnp.Segment) (Workflow_getEventAllVersions_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Workflow_getEventAllVersions_Results{st}, err
}

func NewRootWorkflow_getEventAllVersions_Results(s *capnp.Segment) (Workflow_getEventAllVersions_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Workflow_getEventAllVersions_Results{st}, err
}

func ReadRootWorkflow_getEventAllVersions_Results(msg *capnp.Message) (Workflow_getEventAllVersions_Results, error) {
	root, err := msg.RootPtr()
	return Workflow_getEventAllVersions_Results{root.Struct()}, err
}

func (s Workflow_getEventAllVersions_Results) String() string {
	str, _ := text.Marshal(0x90eb69d2aa988bfb, s.Struct)
	return str
}

func (s Workflow_getEventAllVersions_Results) Events() (Event_List, error) {
	p, err := s.Struct.Ptr(0)
	return Event_List{List: p.List()}, err
}

func (s Workflow_getEventAllVersions_Results) HasEvents() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Workflow_getEventAllVersions_Results) SetEvents(v Event_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewEvents sets the events field to a newly
// allocated Event_List, preferring placement in s's segment.
func (s Workflow_getEventAllVersions_Results) NewEvents(n int32) (Event_List, error) {
	l, err := NewEvent_List(s.Struct.Segment(), n)
	if err != nil {
		return Event_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Workflow_getEventAllVersions_Results_List is a list of Workflow_getEventAllVersions_Results.
type Workflow_getEventAllVersions_Results_List struct{ capnp.List }

// NewWorkflow_getEventAllVersions_Results creates a new list of Workflow_getEventAllVersions_Results.
func NewWorkflow_getEventAllVersions_Results_List(s *capnp.Segment, sz int32) (Workflow_getEventAllVersions_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Workflow_getEventAllVersions_Results_List{l}, err
}

func (s Workflow_getEventAllVersions_Results_List) At(i int) Workflow_getEventAllVersions_Results {
	return Workflow_getEventAllVersions_Results{s.List.Struct(i)}
}

func (s Workflow_getEventAllVersions_Results_List) Set(i int, v Workflow_getEventAllVersions_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Workflow_getEventAllVersions_Results_List) String() string {
	str, _ := text.MarshalList(0x90eb69d2aa988bfb, s.List)
	return str
}

// Workflow_getEventAllVersions_Results_Promise is a wrapper for a Workflow_getEventAllVersions_Results promised by a client call.
type Workflow_getEventAllVersions_Results_Promise struct{ *capnp.Pipeline }

func (p Workflow_getEventAllVersions_Results_Promise) Struct() (Workflow_getEventAllVersions_Results, error) {
	s, err := p.Pipeline.Struct()
	return Workflow_getEventAllVersions_Results{s}, err
}

type Workflow_getLatestEventID_Params struct{ capnp.Struct }

// Workflow_getLatestEventID_Params_TypeID is the unique identifier for the type Workflow_getLatestEventID_Params.
const Workflow_getLatestEventID_Params_TypeID = 0x8dde89bb27860684

func NewWorkflow_getLatestEventID_Params(s *capnp.Segment) (Workflow_getLatestEventID_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Workflow_getLatestEventID_Params{st}, err
}

func NewRootWorkflow_getLatestEventID_Params(s *capnp.Segment) (Workflow_getLatestEventID_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Workflow_getLatestEventID_Params{st}, err
}

func ReadRootWorkflow_getLatestEventID_Params(msg *capnp.Message) (Workflow_getLatestEventID_Params, error) {
	root, err := msg.RootPtr()
	return Workflow_getLatestEventID_Params{root.Struct()}, err
}

func (s Workflow_getLatestEventID_Params) String() string {
	str, _ := text.Marshal(0x8dde89bb27860684, s.Struct)
	return str
}

func (s Workflow_getLatestEventID_Params) FlowID() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Workflow_getLatestEventID_Params) HasFlowID() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Workflow_getLatestEventID_Params) SetFlowID(v []byte) error {
	return s.Struct.SetData(0, v)
}

// Workflow_getLatestEventID_Params_List is a list of Workflow_getLatestEventID_Params.
type Workflow_getLatestEventID_Params_List struct{ capnp.List }

// NewWorkflow_getLatestEventID_Params creates a new list of Workflow_getLatestEventID_Params.
func NewWorkflow_getLatestEventID_Params_List(s *capnp.Segment, sz int32) (Workflow_getLatestEventID_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Workflow_getLatestEventID_Params_List{l}, err
}

func (s Workflow_getLatestEventID_Params_List) At(i int) Workflow_getLatestEventID_Params {
	return Workflow_getLatestEventID_Params{s.List.Struct(i)}
}

func (s Workflow_getLatestEventID_Params_List) Set(i int, v Workflow_getLatestEventID_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Workflow_getLatestEventID_Params_List) String() string {
	str, _ := text.MarshalList(0x8dde89bb27860684, s.List)
	return str
}

// Workflow_getLatestEventID_Params_Promise is a wrapper for a Workflow_getLatestEventID_Params promised by a client call.
type Workflow_getLatestEventID_Params_Promise struct{ *capnp.Pipeline }

func (p Workflow_getLatestEventID_Params_Promise) Struct() (Workflow_getLatestEventID_Params, error) {
	s, err := p.Pipeline.Struct()
	return Workflow_getLatestEventID_Params{s}, err
}

type Workflow_getLatestEventID_Results struct{ capnp.Struct }

// Workflow_getLatestEventID_Results_TypeID is the unique identifier for the type Workflow_getLatestEventID_Results.
const Workflow_getLatestEventID_Results_TypeID = 0xb222156f3117892c

func NewWorkflow_getLatestEventID_Results(s *capnp.Segment) (Workflow_getLatestEventID_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Workflow_getLatestEventID_Results{st}, err
}

func NewRootWorkflow_getLatestEventID_Results(s *capnp.Segment) (Workflow_getLatestEventID_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Workflow_getLatestEventID_Results{st}, err
}

func ReadRootWorkflow_getLatestEventID_Results(msg *capnp.Message) (Workflow_getLatestEventID_Results, error) {
	root, err := msg.RootPtr()
	return Workflow_getLatestEventID_Results{root.Struct()}, err
}

func (s Workflow_getLatestEventID_Results) String() string {
	str, _ := text.Marshal(0xb222156f3117892c, s.Struct)
	return str
}

func (s Workflow_getLatestEventID_Results) EventID() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Workflow_getLatestEventID_Results) HasEventID() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Workflow_getLatestEventID_Results) SetEventID(v []byte) error {
	return s.Struct.SetData(0, v)
}

// Workflow_getLatestEventID_Results_List is a list of Workflow_getLatestEventID_Results.
type Workflow_getLatestEventID_Results_List struct{ capnp.List }

// NewWorkflow_getLatestEventID_Results creates a new list of Workflow_getLatestEventID_Results.
func NewWorkflow_getLatestEventID_Results_List(s *capnp.Segment, sz int32) (Workflow_getLatestEventID_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Workflow_getLatestEventID_Results_List{l}, err
}

func (s Workflow_getLatestEventID_Results_List) At(i int) Workflow_getLatestEventID_Results {
	return Workflow_getLatestEventID_Results{s.List.Struct(i)}
}

func (s Workflow_getLatestEventID_Results_List) Set(i int, v Workflow_getLatestEventID_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Workflow_getLatestEventID_Results_List) String() string {
	str, _ := text.MarshalList(0xb222156f3117892c, s.List)
	return str
}

// Workflow_getLatestEventID_Results_Promise is a wrapper for a Workflow_getLatestEventID_Results promised by a client call.
type Workflow_getLatestEventID_Results_Promise struct{ *capnp.Pipeline }

func (p Workflow_getLatestEventID_Results_Promise) Struct() (Workflow_getLatestEventID_Results, error) {
	s, err := p.Pipeline.Struct()
	return Workflow_getLatestEventID_Results{s}, err
}

type Workflow_getJob_Params struct{ capnp.Struct }

// Workflow_getJob_Params_TypeID is the unique identifier for the type Workflow_getJob_Params.
const Workflow_getJob_Params_TypeID = 0x9eb9067e5f36a40d

func NewWorkflow_getJob_Params(s *capnp.Segment) (Workflow_getJob_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Workflow_getJob_Params{st}, err
}

func NewRootWorkflow_getJob_Params(s *capnp.Segment) (Workflow_getJob_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Workflow_getJob_Params{st}, err
}

func ReadRootWorkflow_getJob_Params(msg *capnp.Message) (Workflow_getJob_Params, error) {
	root, err := msg.RootPtr()
	return Workflow_getJob_Params{root.Struct()}, err
}

func (s Workflow_getJob_Params) String() string {
	str, _ := text.Marshal(0x9eb9067e5f36a40d, s.Struct)
	return str
}

func (s Workflow_getJob_Params) WorkerID() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Workflow_getJob_Params) HasWorkerID() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Workflow_getJob_Params) SetWorkerID(v []byte) error {
	return s.Struct.SetData(0, v)
}

// Workflow_getJob_Params_List is a list of Workflow_getJob_Params.
type Workflow_getJob_Params_List struct{ capnp.List }

// NewWorkflow_getJob_Params creates a new list of Workflow_getJob_Params.
func NewWorkflow_getJob_Params_List(s *capnp.Segment, sz int32) (Workflow_getJob_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Workflow_getJob_Params_List{l}, err
}

func (s Workflow_getJob_Params_List) At(i int) Workflow_getJob_Params {
	return Workflow_getJob_Params{s.List.Struct(i)}
}

func (s Workflow_getJob_Params_List) Set(i int, v Workflow_getJob_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Workflow_getJob_Params_List) String() string {
	str, _ := text.MarshalList(0x9eb9067e5f36a40d, s.List)
	return str
}

// Workflow_getJob_Params_Promise is a wrapper for a Workflow_getJob_Params promised by a client call.
type Workflow_getJob_Params_Promise struct{ *capnp.Pipeline }

func (p Workflow_getJob_Params_Promise) Struct() (Workflow_getJob_Params, error) {
	s, err := p.Pipeline.Struct()
	return Workflow_getJob_Params{s}, err
}

type Workflow_getJob_Results struct{ capnp.Struct }

// Workflow_getJob_Results_TypeID is the unique identifier for the type Workflow_getJob_Results.
const Workflow_getJob_Results_TypeID = 0xbce9dc3869c5a017

func NewWorkflow_getJob_Results(s *capnp.Segment) (Workflow_getJob_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Workflow_getJob_Results{st}, err
}

func NewRootWorkflow_getJob_Results(s *capnp.Segment) (Workflow_getJob_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Workflow_getJob_Results{st}, err
}

func ReadRootWorkflow_getJob_Results(msg *capnp.Message) (Workflow_getJob_Results, error) {
	root, err := msg.RootPtr()
	return Workflow_getJob_Results{root.Struct()}, err
}

func (s Workflow_getJob_Results) String() string {
	str, _ := text.Marshal(0xbce9dc3869c5a017, s.Struct)
	return str
}

func (s Workflow_getJob_Results) EventID() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Workflow_getJob_Results) HasEventID() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Workflow_getJob_Results) SetEventID(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s Workflow_getJob_Results) AckID() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s Workflow_getJob_Results) HasAckID() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Workflow_getJob_Results) SetAckID(v []byte) error {
	return s.Struct.SetData(1, v)
}

func (s Workflow_getJob_Results) FlowID() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return []byte(p.Data()), err
}

func (s Workflow_getJob_Results) HasFlowID() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Workflow_getJob_Results) SetFlowID(v []byte) error {
	return s.Struct.SetData(2, v)
}

// Workflow_getJob_Results_List is a list of Workflow_getJob_Results.
type Workflow_getJob_Results_List struct{ capnp.List }

// NewWorkflow_getJob_Results creates a new list of Workflow_getJob_Results.
func NewWorkflow_getJob_Results_List(s *capnp.Segment, sz int32) (Workflow_getJob_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return Workflow_getJob_Results_List{l}, err
}

func (s Workflow_getJob_Results_List) At(i int) Workflow_getJob_Results {
	return Workflow_getJob_Results{s.List.Struct(i)}
}

func (s Workflow_getJob_Results_List) Set(i int, v Workflow_getJob_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Workflow_getJob_Results_List) String() string {
	str, _ := text.MarshalList(0xbce9dc3869c5a017, s.List)
	return str
}

// Workflow_getJob_Results_Promise is a wrapper for a Workflow_getJob_Results promised by a client call.
type Workflow_getJob_Results_Promise struct{ *capnp.Pipeline }

func (p Workflow_getJob_Results_Promise) Struct() (Workflow_getJob_Results, error) {
	s, err := p.Pipeline.Struct()
	return Workflow_getJob_Results{s}, err
}

type Workflow_ackJob_Params struct{ capnp.Struct }

// Workflow_ackJob_Params_TypeID is the unique identifier for the type Workflow_ackJob_Params.
const Workflow_ackJob_Params_TypeID = 0x94d4c0b32ff637f3

func NewWorkflow_ackJob_Params(s *capnp.Segment) (Workflow_ackJob_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Workflow_ackJob_Params{st}, err
}

func NewRootWorkflow_ackJob_Params(s *capnp.Segment) (Workflow_ackJob_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Workflow_ackJob_Params{st}, err
}

func ReadRootWorkflow_ackJob_Params(msg *capnp.Message) (Workflow_ackJob_Params, error) {
	root, err := msg.RootPtr()
	return Workflow_ackJob_Params{root.Struct()}, err
}

func (s Workflow_ackJob_Params) String() string {
	str, _ := text.Marshal(0x94d4c0b32ff637f3, s.Struct)
	return str
}

func (s Workflow_ackJob_Params) Event() (Event, error) {
	p, err := s.Struct.Ptr(0)
	return Event{Struct: p.Struct()}, err
}

func (s Workflow_ackJob_Params) HasEvent() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Workflow_ackJob_Params) SetEvent(v Event) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewEvent sets the event field to a newly
// allocated Event struct, preferring placement in s's segment.
func (s Workflow_ackJob_Params) NewEvent() (Event, error) {
	ss, err := NewEvent(s.Struct.Segment())
	if err != nil {
		return Event{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Workflow_ackJob_Params) AckID() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s Workflow_ackJob_Params) HasAckID() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Workflow_ackJob_Params) SetAckID(v []byte) error {
	return s.Struct.SetData(1, v)
}

// Workflow_ackJob_Params_List is a list of Workflow_ackJob_Params.
type Workflow_ackJob_Params_List struct{ capnp.List }

// NewWorkflow_ackJob_Params creates a new list of Workflow_ackJob_Params.
func NewWorkflow_ackJob_Params_List(s *capnp.Segment, sz int32) (Workflow_ackJob_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Workflow_ackJob_Params_List{l}, err
}

func (s Workflow_ackJob_Params_List) At(i int) Workflow_ackJob_Params {
	return Workflow_ackJob_Params{s.List.Struct(i)}
}

func (s Workflow_ackJob_Params_List) Set(i int, v Workflow_ackJob_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Workflow_ackJob_Params_List) String() string {
	str, _ := text.MarshalList(0x94d4c0b32ff637f3, s.List)
	return str
}

// Workflow_ackJob_Params_Promise is a wrapper for a Workflow_ackJob_Params promised by a client call.
type Workflow_ackJob_Params_Promise struct{ *capnp.Pipeline }

func (p Workflow_ackJob_Params_Promise) Struct() (Workflow_ackJob_Params, error) {
	s, err := p.Pipeline.Struct()
	return Workflow_ackJob_Params{s}, err
}

func (p Workflow_ackJob_Params_Promise) Event() Event_Promise {
	return Event_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type Workflow_ackJob_Results struct{ capnp.Struct }

// Workflow_ackJob_Results_TypeID is the unique identifier for the type Workflow_ackJob_Results.
const Workflow_ackJob_Results_TypeID = 0xf0040fe0d0e55a1b

func NewWorkflow_ackJob_Results(s *capnp.Segment) (Workflow_ackJob_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Workflow_ackJob_Results{st}, err
}

func NewRootWorkflow_ackJob_Results(s *capnp.Segment) (Workflow_ackJob_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Workflow_ackJob_Results{st}, err
}

func ReadRootWorkflow_ackJob_Results(msg *capnp.Message) (Workflow_ackJob_Results, error) {
	root, err := msg.RootPtr()
	return Workflow_ackJob_Results{root.Struct()}, err
}

func (s Workflow_ackJob_Results) String() string {
	str, _ := text.Marshal(0xf0040fe0d0e55a1b, s.Struct)
	return str
}

func (s Workflow_ackJob_Results) Acked() bool {
	return s.Struct.Bit(0)
}

func (s Workflow_ackJob_Results) SetAcked(v bool) {
	s.Struct.SetBit(0, v)
}

// Workflow_ackJob_Results_List is a list of Workflow_ackJob_Results.
type Workflow_ackJob_Results_List struct{ capnp.List }

// NewWorkflow_ackJob_Results creates a new list of Workflow_ackJob_Results.
func NewWorkflow_ackJob_Results_List(s *capnp.Segment, sz int32) (Workflow_ackJob_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return Workflow_ackJob_Results_List{l}, err
}

func (s Workflow_ackJob_Results_List) At(i int) Workflow_ackJob_Results {
	return Workflow_ackJob_Results{s.List.Struct(i)}
}

func (s Workflow_ackJob_Results_List) Set(i int, v Workflow_ackJob_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Workflow_ackJob_Results_List) String() string {
	str, _ := text.MarshalList(0xf0040fe0d0e55a1b, s.List)
	return str
}

// Workflow_ackJob_Results_Promise is a wrapper for a Workflow_ackJob_Results promised by a client call.
type Workflow_ackJob_Results_Promise struct{ *capnp.Pipeline }

func (p Workflow_ackJob_Results_Promise) Struct() (Workflow_ackJob_Results, error) {
	s, err := p.Pipeline.Struct()
	return Workflow_ackJob_Results{s}, err
}

const schema_d598217bc368711c = "x\xda\xa4Uah\x1cE\x14~of\xf7\xe6\x12\x93" +
	"6\xe3Fk\xb5\x10\x1aRl\xa4M\xd3\xc4j=\x08" +
	"w\xc6\x14\xbc\x98\xcaM\xa8U\x8bA7\x97\xb59\xef" +
	"r\x97\xdc\xed5M\xa5\xc6H[\x88U\xb1\xa0\xd0V" +
	"\x90\xa6Z!B\xa9\xb5\x88\x88\x8a\x95\xd2J\x8b\x88-" +
	"*\xfd!\xe2\x9fR\x8a \x82\xe8\x9f\x12Wf\xf7f" +
	"o\x13\xef\x9a\x80\xff\xeev\xbf\xf9\xe6\xbd\xef\xbd\xef\xdb" +
	"\xf6Gh\x8cl\xd4\xa3\x0c@l\xd3C\xce\xdc\x99\xda" +
	"\xd9\x0bk\x1e\x9b\x02n \x80\x8e\x0c\xa0s?\xcd#" +
	"\xa0q\x88F\x01\x9d\xf3s\xc7\xbf:\xfa\xcf\xa5\x83\x1e" +
	"@\x93\xefO\xd3f\x04\xcd\xd9pn\xed\xba\xdf\xeb\xee" +
	"|\xadt\x94\xcaWGh\x87<:CO\x01:\xfb" +
	"B\x07\xee\xfd|\xfa\x97\xd7\x83\xdc]\xda\x0e\x09\x88k" +
	"\x92\xfb\xe6\xc1\xc3\x1f^I\xfd\xf6f\x10\x90\xd2\xf6H" +
	"@\xd1\x05\xfc\xf9\xe0\xdf\x1b\xce\x9c\xfd\xe1\xad\x12\x80H" +
	"\xc0\x09\xadV\x02Nj\xe3\x80N\xfd\xfb\x0f<\xfbR" +
	"\xe8\xb3w\x83\x0c5\xba\x0b\xe0\xbad8\xf5\xdd\xc9\xf6" +
	"\xce\x95\x03\xef\x01\xaf\xa5\xce\xaa\xb1\xe1s/\xae>\xfc" +
	"#\x00\x1a\x9b\xf4\xa3F\x97.\xf1\x0f\xe9\xdf\xa01\x12" +
	"b\x00N\xf8\xea\xc4\xe4\xe5\xc8\x81\x0f\x82tO\x84\"" +
	"\x92n $\xe9\xd6M\xaf\xd8\x98\xbb\xa3\xf9\xe3 `" +
	"ohP\x02\xa6]\xc0\x8ac\xe7S\x9b\x7f\xbe\xf1E" +
	"P\x94\xd9\xd0\xed\x12p:$E\xb9\xb6\xa6\xc6>\xdb" +
	"6|!\xc8\x10g\xcd\x12 \x98d\x98J\xf6\x0d\xbd" +
	"q\xdb\xd3\xdf\x06\x01c\xecn\x09\x98p\x01\xdd\x9f\xb6" +
	"\xfeT\xbb\xf9\xd8\x0d\xe0\x0d\xe8|}\xb5\xf3\xa3\xee\xed" +
	"{\xfe\xf2\xc41\x8e\xb0K\xc6\x09&\x7f\xcd0\xa9\xcf" +
	"=;\xae}\xff\xebr\xed\x0f\x10\x06\xaa\xf1\xcd1\xb7" +
	"\x1c=,\xc9\xfc\xf3\xa2\x16\xb1,\x90[\xb8\xb1&\xfc" +
	"\x8a\xd1\x1a^\x01`l\x0a_\x07t\xde\x11]W." +
	"\xb6\xda7K\xa5\xb9l+k\xdc\xd2V\xd7\\\x87\xf5" +
	"\xce\x0b\xb9\xc1\xb6\xa49\x9a\xd5F#O\xe6\xf2\xe9\xe7" +
	"3\xb9\xf1\xb6\x9d\x96\xbde\x97\x95\xb5\x1f\xced\xb6[" +
	"\xf9B*\x97-\xb4$\x9a\xcc\xbc9R\x10\x1a\xd5\x00" +
	"4\x04\xe0\xf5\xdd\x00\"LQ4\x12\x9c\xb4$>\xde" +
	"\x83\xf5@\xb0\x1e\xd0\xa7\xa5\x01\xda\xd1\xa2G\xdb\xd2o" +
	"\x15\x8a,c\x17\xaa\xa1\x1e\xb7\xc6=\xa0\xba\xb4\xce\xbf" +
	"tK\x04@\xc4(\x8a>\x82\x1c\xb1QJ\xc4\xe3\xbd" +
	"\x00\xe2Q\x8ab\x1bANH#\x12\x00.:\x00D" +
	"\x1fE\xf1\x14\xc1\xa8d\x0eT7\x9e\xcb\xa7\xad|\xbc" +
	"\x07\x00\xd4\xb3&\xb7\x03l(\xcb\x0b\x88\x0d\x81N\x16" +
	"\x08\xd4g\xdaV\xc1\xeb'\xde\xd3\x920\xf3&\x9d\xaf" +
	"N\xa4\xac\xce\xc2\xeb\x97\xaay\x7f\xd4*\x143vE" +
	"\xda\x16\x82Q\xb7\xe4\x02.\x03LP\\P\xfa\xb2*" +
	"C0\x93\xe9\xde\xdc\xa0[\xf0H\xc1\xe5R\xd4\xadR" +
	"\xb0\x16\x8a\xa2= \xedz\xf9p-Eq?\xa9*" +
	"Q\x93\x99L/2\xfa\x9d\x96=\xef\xd6@Crv" +
	"u\x14\xc5]\xa4\xe2\\|:Tt47\x9e@\x14" +
	"\xab\xa8\x0e\xe0\xef7\xaa\xd0\xe3\x97{\x81\xf0\x8b\x0c\xd1" +
	"O;T\x19\xc1\xbf\x1c\x04\xc2?aH|\xcb\xa22" +
	"7\x9f\x95\xe7f\x18R?`Q\x85\x1d\x7f\xfb8\x10" +
	"~\x88\xa1\xe6\x07$\xaaX\xe1\xfb_\x05\xc2\xa7\x18\xea" +
	"~\xb2\xa1J\x14^\x8c\x00\xe1)\x86!?\x16Q\xd9" +
	"\x9b\x0f\xc8w\x829\xca\x15\x00\x10CGm?0+" +
	"k\xc7\xd0Qk\xe1\xbdU\xffPm\x09\xcbe\x0b\xde" +
	"sw\x1fQ-\xa4DG=\xd1c\x18\xf5f\x1e\xc3" +
	"\x04\xe2\xa2\x96\xab\xb4sK1\xfa-\xed\xa1\x0c\xff\x7f" +
	"\xd2\xa3\xb4B\xfdny8/\x13\xba+e\x82\\\xdc" +
	"\x1e\x8a\"\x11\xc8\x84\xad\x91rP,\xbct\xfe\x16W" +
	"\xb3,\xad`\xd9\x8a\xedu\x94\xdb[4Z*\x92V" +
	"\x88\x94\xa5HFF#\xee\xf9\xb6\xad\x96m\x0e\x99\xb6" +
	"\x09 \xdd\x12\xb0y\xf3\"6gik\x02\xeb\x80`" +
	"\x1d`\xd3.3S\xb4\xd4\xbf[\x05\x8a?\x97*\x1a" +
	"\x98\xc9\xb45\x84\x08\x04q\xbe\xa9\xbd\xf5\x16\x1a\x06?" +
	"\x93\xd8\xeb\x94\xeb\x07\xd1\xe0s\x9ar\x82\xcfP\x14\xc3" +
	"\x04U\xf1\x96\xd4\xe59\x8a\"#G\x8d\xde\xa8S\xf7" +
	"\x01\x88!\x8a\xe2e\x82\x9c\x92F\xa4\x00|\xaf<\xbd" +
	"\x9b\xa2\xd8'C9\x95\xb1\xad\xbc*i2\x99\xcb\xda" +
	"rL%A\x97\x8fX\xb6Y\x8eV\xbf4/Z\xa3" +
	"^R-\xeds\xa7&Y\xb9\x0b\x7f\x06Vo\xa9\xe2" +
	"\xd1\xc0\xc6\x8e\xc8\xde\x86)\x0a[\xb6A\xbd6\xc6\xa4" +
	"\xb0\x19\x8ab\xf7\x92>m\xff\xd9\xf4*\xfb\xf8o\x00" +
	"\x00\x00\xff\xff\x1c\xc1\x99\xde"

func init() {
	schemas.Register(schema_d598217bc368711c,
		0x814b25c6a90ab3fd,
		0x8bcafe9abfa2fdc5,
		0x8c160cee2c28c32f,
		0x8dde89bb27860684,
		0x90eb69d2aa988bfb,
		0x94d4c0b32ff637f3,
		0x9eb9067e5f36a40d,
		0xa35d193330adceaf,
		0xa6863ad17f79d808,
		0xb222156f3117892c,
		0xbce9dc3869c5a017,
		0xc6682ec0740925e5,
		0xcc590b8e644c6381,
		0xe9a0380ad629b742,
		0xf0040fe0d0e55a1b,
		0xf57a5642b033d8c1,
		0xfb7429c9d23d519b)
}
